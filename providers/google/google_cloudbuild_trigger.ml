(* DO NOT EDIT, GENERATED AUTOMATICALLY *)

open! Tf_core

type approval_config = {
  approval_required : bool prop option; [@option]
      (** Whether or not approval is needed. If this is set on a build, it will become pending when run,
and will need to be explicitly approved to start. *)
}
[@@deriving yojson_of]
(** Configuration for manual approval to start a build invocation of this BuildTrigger.
Builds created by this trigger will require approval before they execute.
Any user with a Cloud Build Approver role for the project can approve a build. *)

type bitbucket_server_trigger_config__pull_request = {
  branch : string prop;
      (** Regex of branches to match.
The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax *)
  comment_control : string prop option; [@option]
      (** Configure builds to run whether a repository owner or collaborator need to comment /gcbrun. Possible values: [COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY] *)
  invert_regex : bool prop option; [@option]
      (** If true, branches that do NOT match the git_ref will trigger a build. *)
}
[@@deriving yojson_of]
(** Filter to match changes in pull requests. *)

type bitbucket_server_trigger_config__push = {
  branch : string prop option; [@option]
      (** Regex of branches to match.  Specify only one of branch or tag. *)
  invert_regex : bool prop option; [@option]
      (** When true, only trigger a build if the revision regex does NOT match the gitRef regex. *)
  tag : string prop option; [@option]
      (** Regex of tags to match.  Specify only one of branch or tag. *)
}
[@@deriving yojson_of]
(** Filter to match changes in refs like branches, tags. *)

type bitbucket_server_trigger_config = {
  bitbucket_server_config_resource : string prop;
      (** The Bitbucket server config resource that this trigger config maps to. *)
  project_key : string prop;
      (** Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is TEST. *)
  repo_slug : string prop;
      (** Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL.
For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo. *)
  pull_request : bitbucket_server_trigger_config__pull_request list;
  push : bitbucket_server_trigger_config__push list;
}
[@@deriving yojson_of]
(** BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received. *)

type build__artifacts__maven_artifacts = {
  artifact_id : string prop option; [@option]
      (** Maven artifactId value used when uploading the artifact to Artifact Registry. *)
  group_id : string prop option; [@option]
      (** Maven groupId value used when uploading the artifact to Artifact Registry. *)
  path : string prop option; [@option]
      (** Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar. *)
  repository : string prop option; [@option]
      (** Artifact Registry repository, in the form https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY

Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix. *)
  version : string prop option; [@option]
      (** Maven version value used when uploading the artifact to Artifact Registry. *)
}
[@@deriving yojson_of]
(** A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.

The location and generation of the uploaded objects will be stored in the Build resource's results field.

If any objects fail to be pushed, the build is marked FAILURE. *)

type build__artifacts__npm_packages = {
  package_path : string prop option; [@option]
      (** Path to the package.json. e.g. workspace/path/to/package *)
  repository : string prop option; [@option]
      (** Artifact Registry repository, in the form https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY

Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix. *)
}
[@@deriving yojson_of]
(** Npm package to upload to Artifact Registry upon successful completion of all build steps.

The location and generation of the uploaded objects will be stored in the Build resource's results field.

If any objects fail to be pushed, the build is marked FAILURE. *)

type build__artifacts__objects__timing = {
  end_time : string prop;  (** end_time *)
  start_time : string prop;  (** start_time *)
}
[@@deriving yojson_of]

type build__artifacts__objects = {
  location : string prop option; [@option]
      (** Cloud Storage bucket and optional object path, in the form gs://bucket/path/to/somewhere/.

Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
this location as a prefix. *)
  paths : string prop list option; [@option]
      (** Path globs used to match files in the build's workspace. *)
}
[@@deriving yojson_of]
(** A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.

Files in the workspace matching specified paths globs will be uploaded to the
Cloud Storage location using the builder service account's credentials.

The location and generation of the uploaded objects will be stored in the Build resource's results field.

If any objects fail to be pushed, the build is marked FAILURE. *)

type build__artifacts__python_packages = {
  paths : string prop list option; [@option]
      (** Path globs used to match files in the build's workspace. For Python/ Twine, this is usually dist/*, and sometimes additionally an .asc file. *)
  repository : string prop option; [@option]
      (** Artifact Registry repository, in the form https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY

Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix. *)
}
[@@deriving yojson_of]
(** Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.

The location and generation of the uploaded objects will be stored in the Build resource's results field.

If any objects fail to be pushed, the build is marked FAILURE. *)

type build__artifacts = {
  images : string prop list option; [@option]
      (** A list of images to be pushed upon the successful completion of all build steps.

The images will be pushed using the builder service account's credentials.

The digests of the pushed images will be stored in the Build resource's results field.

If any of the images fail to be pushed, the build is marked FAILURE. *)
  maven_artifacts : build__artifacts__maven_artifacts list;
  npm_packages : build__artifacts__npm_packages list;
  objects : build__artifacts__objects list;
  python_packages : build__artifacts__python_packages list;
}
[@@deriving yojson_of]
(** Artifacts produced by the build that should be uploaded upon successful completion of all build steps. *)

type build__available_secrets__secret_manager = {
  env : string prop;
      (** Environment variable name to associate with the secret. Secret environment
variables must be unique across all of a build's secrets, and must be used
by at least one build step. *)
  version_name : string prop;
      (** Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/* *)
}
[@@deriving yojson_of]
(** Pairs a secret environment variable with a SecretVersion in Secret Manager. *)

type build__available_secrets = {
  secret_manager : build__available_secrets__secret_manager list;
}
[@@deriving yojson_of]
(** Secrets and secret environment variables. *)

type build__options__volumes = {
  name : string prop option; [@option]
      (** Name of the volume to mount.

Volume names must be unique per build step and must be valid names for Docker volumes.
Each named volume must be used by at least two build steps. *)
  path : string prop option; [@option]
      (** Path at which to mount the volume.

Paths must be absolute and cannot conflict with other volume paths on the same
build step or with certain reserved volume paths. *)
}
[@@deriving yojson_of]
(** Global list of volumes to mount for ALL build steps

Each volume is created as an empty volume prior to starting the build process.
Upon completion of the build, volumes and their contents are discarded. Global
volume names and paths cannot conflict with the volumes defined a build step.

Using a global volume in a build with only one step is not valid as it is indicative
of a build request with an incorrect configuration. *)

type build__options = {
  disk_size_gb : float prop option; [@option]
      (** Requested disk size for the VM that runs the build. Note that this is NOT disk free;
some of the space will be used by the operating system and build utilities.
Also note that this is the minimum disk size that will be allocated for the build --
the build may run with a larger disk than requested. At present, the maximum disk size
is 1000GB; builds that request more than the maximum are rejected with an error. *)
  dynamic_substitutions : bool prop option; [@option]
      (** Option to specify whether or not to apply bash style string operations to the substitutions.

NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file. *)
  env : string prop list option; [@option]
      (** A list of global environment variable definitions that will exist for all build steps
in this build. If a variable is defined in both globally and in a build step,
the variable will use the build step value.

The elements are of the form KEY=VALUE for the environment variable KEY being given the value VALUE. *)
  log_streaming_option : string prop option; [@option]
      (** Option to define build log streaming behavior to Google Cloud Storage. Possible values: [STREAM_DEFAULT, STREAM_ON, STREAM_OFF] *)
  logging : string prop option; [@option]
      (** Option to specify the logging mode, which determines if and where build logs are stored. Possible values: [LOGGING_UNSPECIFIED, LEGACY, GCS_ONLY, STACKDRIVER_ONLY, CLOUD_LOGGING_ONLY, NONE] *)
  machine_type : string prop option; [@option]
      (** Compute Engine machine type on which to run the build. *)
  requested_verify_option : string prop option; [@option]
      (** Requested verifiability options. Possible values: [NOT_VERIFIED, VERIFIED] *)
  secret_env : string prop list option; [@option]
      (** A list of global environment variables, which are encrypted using a Cloud Key Management
Service crypto key. These values must be specified in the build's Secret. These variables
will be available to all build steps in this build. *)
  source_provenance_hash : string prop list option; [@option]
      (** Requested hash for SourceProvenance. Possible values: [NONE, SHA256, MD5] *)
  substitution_option : string prop option; [@option]
      (** Option to specify behavior when there is an error in the substitution checks.

NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
in the build configuration file. Possible values: [MUST_MATCH, ALLOW_LOOSE] *)
  worker_pool : string prop option; [@option]
      (** Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}

This field is experimental. *)
  volumes : build__options__volumes list;
}
[@@deriving yojson_of]
(** Special options for this build. *)

type build__secret = {
  kms_key_name : string prop;
      (** Cloud KMS key name to use to decrypt these envs. *)
  secret_env : (string * string prop) list option; [@option]
      (** Map of environment variable name to its encrypted value.
Secret environment variables must be unique across all of a build's secrets,
and must be used by at least one build step. Values can be at most 64 KB in size.
There can be at most 100 secret values across all of a build's secrets. *)
}
[@@deriving yojson_of]
(** Secrets to decrypt using Cloud Key Management Service. *)

type build__source__repo_source = {
  branch_name : string prop option; [@option]
      (** Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
The syntax of the regular expressions accepted is the syntax accepted by RE2 and
described at https://github.com/google/re2/wiki/Syntax *)
  commit_sha : string prop option; [@option]
      (** Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided. *)
  dir : string prop option; [@option]
      (** Directory, relative to the source root, in which to run the build.
This must be a relative path. If a step's dir is specified and is an absolute path,
this value is ignored for that step's execution. *)
  invert_regex : bool prop option; [@option]
      (** Only trigger a build if the revision regex does NOT match the revision regex. *)
  project_id : string prop option; [@option]
      (** ID of the project that owns the Cloud Source Repository.
If omitted, the project ID requesting the build is assumed. *)
  repo_name : string prop;
      (** Name of the Cloud Source Repository. *)
  substitutions : (string * string prop) list option; [@option]
      (** Substitutions to use in a triggered build. Should only be used with triggers.run *)
  tag_name : string prop option; [@option]
      (** Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
The syntax of the regular expressions accepted is the syntax accepted by RE2 and
described at https://github.com/google/re2/wiki/Syntax *)
}
[@@deriving yojson_of]
(** Location of the source in a Google Cloud Source Repository. *)

type build__source__storage_source = {
  bucket : string prop;
      (** Google Cloud Storage bucket containing the source. *)
  generation : string prop option; [@option]
      (** Google Cloud Storage generation for the object.
If the generation is omitted, the latest generation will be used *)
  object_ : string prop; [@key "object"]
      (** Google Cloud Storage object containing the source.
This object must be a gzipped archive file (.tar.gz) containing source to build. *)
}
[@@deriving yojson_of]
(** Location of the source in an archive file in Google Cloud Storage. *)

type build__source = {
  repo_source : build__source__repo_source list;
  storage_source : build__source__storage_source list;
}
[@@deriving yojson_of]
(** The location of the source files to build.

One of 'storageSource' or 'repoSource' must be provided. *)

type build__step__volumes = {
  name : string prop;
      (** Name of the volume to mount.

Volume names must be unique per build step and must be valid names for
Docker volumes. Each named volume must be used by at least two build steps. *)
  path : string prop;
      (** Path at which to mount the volume.

Paths must be absolute and cannot conflict with other volume paths on
the same build step or with certain reserved volume paths. *)
}
[@@deriving yojson_of]
(** List of volumes to mount into the build step.

Each volume is created as an empty volume prior to execution of the
build step. Upon completion of the build, volumes and their contents
are discarded.

Using a named volume in only one step is not valid as it is
indicative of a build request with an incorrect configuration. *)

type build__step = {
  allow_exit_codes : float prop list option; [@option]
      (** Allow this build step to fail without failing the entire build if and
only if the exit code is one of the specified codes.

If 'allowFailure' is also specified, this field will take precedence. *)
  allow_failure : bool prop option; [@option]
      (** Allow this build step to fail without failing the entire build.
If false, the entire build will fail if this step fails. Otherwise, the
build will succeed, but this step will still have a failure status.
Error information will be reported in the 'failureDetail' field.

'allowExitCodes' takes precedence over this field. *)
  args : string prop list option; [@option]
      (** A list of arguments that will be presented to the step when it is started.

If the image used to run the step's container has an entrypoint, the args
are used as arguments to that entrypoint. If the image does not define an
entrypoint, the first element in args is used as the entrypoint, and the
remainder will be used as arguments. *)
  dir : string prop option; [@option]
      (** Working directory to use when running this step's container.

If this value is a relative path, it is relative to the build's working
directory. If this value is absolute, it may be outside the build's working
directory, in which case the contents of the path may not be persisted
across build step executions, unless a 'volume' for that path is specified.

If the build specifies a 'RepoSource' with 'dir' and a step with a
'dir',
which specifies an absolute path, the 'RepoSource' 'dir' is ignored
for the step's execution. *)
  entrypoint : string prop option; [@option]
      (** Entrypoint to be used instead of the build step image's
default entrypoint.
If unset, the image's default entrypoint is used *)
  env : string prop list option; [@option]
      (** A list of environment variable definitions to be used when
running a step.

The elements are of the form KEY=VALUE for the environment variable
KEY being given the value VALUE. *)
  id : string prop option; [@option]
      (** Unique identifier for this build step, used in 'wait_for' to
reference this build step as a dependency. *)
  name : string prop;
      (** The name of the container image that will run this particular build step.

If the image is available in the host's Docker daemon's cache, it will be
run directly. If not, the host will attempt to pull the image first, using
the builder service account's credentials if necessary.

The Docker daemon's cache will already have the latest versions of all of
the officially supported build steps (see https://github.com/GoogleCloudPlatform/cloud-builders
for images and examples).
The Docker daemon will also have cached many of the layers for some popular
images, like ubuntu, debian, but they will be refreshed at the time
you attempt to use them.

If you built an image in a previous build step, it will be stored in the
host's Docker daemon's cache and is available to use as the name for a
later build step. *)
  script : string prop option; [@option]
      (** A shell script to be executed in the step.
When script is provided, the user cannot specify the entrypoint or args. *)
  secret_env : string prop list option; [@option]
      (** A list of environment variables which are encrypted using
a Cloud Key
Management Service crypto key. These values must be specified in
the build's 'Secret'. *)
  timeout : string prop option; [@option]
      (** Time limit for executing this build step. If not defined,
the step has no
time limit and will be allowed to continue to run until either it
completes or the build itself times out. *)
  timing : string prop option; [@option]
      (** Output only. Stores timing information for executing this
build step. *)
  wait_for : string prop list option; [@option]
      (** The ID(s) of the step(s) that this build step depends on.

This build step will not start until all the build steps in 'wait_for'
have completed successfully. If 'wait_for' is empty, this build step
will start when all previous build steps in the 'Build.Steps' list
have completed successfully. *)
  volumes : build__step__volumes list;
}
[@@deriving yojson_of]
(** The operations to be performed on the workspace. *)

type build = {
  images : string prop list option; [@option]
      (** A list of images to be pushed upon the successful completion of all build steps.
The images are pushed using the builder service account's credentials.
The digests of the pushed images will be stored in the Build resource's results field.
If any of the images fail to be pushed, the build status is marked FAILURE. *)
  logs_bucket : string prop option; [@option]
      (** Google Cloud Storage bucket where logs should be written.
Logs file names will be of the format ${logsBucket}/log-${build_id}.txt. *)
  queue_ttl : string prop option; [@option]
      (** TTL in queue for this build. If provided and the build is enqueued longer than this value,
the build will expire and the build status will be EXPIRED.
The TTL starts ticking from createTime.
A duration in seconds with up to nine fractional digits, terminated by 's'. Example: 3.5s. *)
  substitutions : (string * string prop) list option; [@option]
      (** Substitutions data for Build resource. *)
  tags : string prop list option; [@option]
      (** Tags for annotation of a Build. These are not docker tags. *)
  timeout : string prop option; [@option]
      (** Amount of time that this build should be allowed to run, to second granularity.
If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT.
This timeout must be equal to or greater than the sum of the timeouts for build steps within the build.
The expected format is the number of seconds followed by s.
Default time is ten minutes (600s). *)
  artifacts : build__artifacts list;
  available_secrets : build__available_secrets list;
  options : build__options list;
  secret : build__secret list;
  source : build__source list;
  step : build__step list;
}
[@@deriving yojson_of]
(** Contents of the build template. Either a filename or build template must be provided. *)

type git_file_source = {
  bitbucket_server_config : string prop option; [@option]
      (** The full resource name of the bitbucket server config.
Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id}. *)
  github_enterprise_config : string prop option; [@option]
      (** The full resource name of the github enterprise config.
Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}. *)
  path : string prop;
      (** The path of the file, with the repo root as the root of the path. *)
  repo_type : string prop;
      (** The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER Possible values: [UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER] *)
  repository : string prop option; [@option]
      (** The fully qualified resource name of the Repo API repository. The fully qualified resource name of the Repo API repository.
If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. *)
  revision : string prop option; [@option]
      (** The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path. *)
  uri : string prop option; [@option]
      (** The URI of the repo (optional). If unspecified, the repo from which the trigger
invocation originated is assumed to be the repo from which to read the specified path. *)
}
[@@deriving yojson_of]
(** The file source describing the local or remote Build template. *)

type github__pull_request = {
  branch : string prop;  (** Regex of branches to match. *)
  comment_control : string prop option; [@option]
      (** Whether to block builds on a /gcbrun comment from a repository owner or collaborator. Possible values: [COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY] *)
  invert_regex : bool prop option; [@option]
      (** If true, branches that do NOT match the git_ref will trigger a build. *)
}
[@@deriving yojson_of]
(** filter to match changes in pull requests. Specify only one of 'pull_request' or 'push'. *)

type github__push = {
  branch : string prop option; [@option]
      (** Regex of branches to match.  Specify only one of branch or tag. *)
  invert_regex : bool prop option; [@option]
      (** When true, only trigger a build if the revision regex does NOT match the git_ref regex. *)
  tag : string prop option; [@option]
      (** Regex of tags to match.  Specify only one of branch or tag. *)
}
[@@deriving yojson_of]
(** filter to match changes in refs, like branches or tags. Specify only one of 'pull_request' or 'push'. *)

type github = {
  enterprise_config_resource_name : string prop option; [@option]
      (** The resource name of the github enterprise config that should be applied to this installation.
For example: projects/{$projectId}/locations/{$locationId}/githubEnterpriseConfigs/{$configId} *)
  name : string prop option; [@option]
      (** Name of the repository. For example: The name for
https://github.com/googlecloudplatform/cloud-builders is cloud-builders. *)
  owner : string prop option; [@option]
      (** Owner of the repository. For example: The owner for
https://github.com/googlecloudplatform/cloud-builders is googlecloudplatform. *)
  pull_request : github__pull_request list;
  push : github__push list;
}
[@@deriving yojson_of]
(** Describes the configuration of a trigger that creates a build whenever a GitHub event is received.

One of 'trigger_template', 'github', 'pubsub_config' or 'webhook_config' must be provided. *)

type pubsub_config = {
  service_account_email : string prop option; [@option]
      (** Service account that will make the push request. *)
  topic : string prop;
      (** The name of the topic from which this subscription is receiving messages. *)
}
[@@deriving yojson_of]
(** PubsubConfig describes the configuration of a trigger that creates
a build whenever a Pub/Sub message is published.

One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided. *)

type repository_event_config__pull_request = {
  branch : string prop option; [@option]
      (** Regex of branches to match.

The syntax of the regular expressions accepted is the syntax accepted by
RE2 and described at https://github.com/google/re2/wiki/Syntax *)
  comment_control : string prop option; [@option]
      (** Configure builds to run whether a repository owner or collaborator need to comment '/gcbrun'. Possible values: [COMMENTS_DISABLED, COMMENTS_ENABLED, COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY] *)
  invert_regex : bool prop option; [@option]
      (** If true, branches that do NOT match the git_ref will trigger a build. *)
}
[@@deriving yojson_of]
(** Contains filter properties for matching Pull Requests. *)

type repository_event_config__push = {
  branch : string prop option; [@option]
      (** Regex of branches to match.

The syntax of the regular expressions accepted is the syntax accepted by
RE2 and described at https://github.com/google/re2/wiki/Syntax *)
  invert_regex : bool prop option; [@option]
      (** If true, only trigger a build if the revision regex does NOT match the git_ref regex. *)
  tag : string prop option; [@option]
      (** Regex of tags to match.

The syntax of the regular expressions accepted is the syntax accepted by
RE2 and described at https://github.com/google/re2/wiki/Syntax *)
}
[@@deriving yojson_of]
(** Contains filter properties for matching git pushes. *)

type repository_event_config = {
  repository : string prop option; [@option]
      (** The resource name of the Repo API resource. *)
  pull_request : repository_event_config__pull_request list;
  push : repository_event_config__push list;
}
[@@deriving yojson_of]
(** The configuration of a trigger that creates a build whenever an event from Repo API is received. *)

type source_to_build = {
  bitbucket_server_config : string prop option; [@option]
      (** The full resource name of the bitbucket server config.
Format: projects/{project}/locations/{location}/bitbucketServerConfigs/{id}. *)
  github_enterprise_config : string prop option; [@option]
      (** The full resource name of the github enterprise config.
Format: projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. projects/{project}/githubEnterpriseConfigs/{id}. *)
  ref : string prop;
      (** The branch or tag to use. Must start with refs/ (required). *)
  repo_type : string prop;
      (** The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER Possible values: [UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER] *)
  repository : string prop option; [@option]
      (** The qualified resource name of the Repo API repository.
Either uri or repository can be specified and is required. *)
  uri : string prop option; [@option]  (** The URI of the repo. *)
}
[@@deriving yojson_of]
(** The repo and ref of the repository from which to build.
This field is used only for those triggers that do not respond to SCM events.
Triggers that respond to such events build source at whatever commit caused the event.
This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.

One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided. *)

type timeouts = {
  create : string prop option; [@option]  (** create *)
  delete : string prop option; [@option]  (** delete *)
  update : string prop option; [@option]  (** update *)
}
[@@deriving yojson_of]
(** timeouts *)

type trigger_template = {
  branch_name : string prop option; [@option]
      (** Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
This field is a regular expression. *)
  commit_sha : string prop option; [@option]
      (** Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided. *)
  dir : string prop option; [@option]
      (** Directory, relative to the source root, in which to run the build.

This must be a relative path. If a step's dir is specified and
is an absolute path, this value is ignored for that step's
execution. *)
  invert_regex : bool prop option; [@option]
      (** Only trigger a build if the revision regex does NOT match the revision regex. *)
  project_id : string prop option; [@option]
      (** ID of the project that owns the Cloud Source Repository. If
omitted, the project ID requesting the build is assumed. *)
  repo_name : string prop option; [@option]
      (** Name of the Cloud Source Repository. If omitted, the name default is assumed. *)
  tag_name : string prop option; [@option]
      (** Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
This field is a regular expression. *)
}
[@@deriving yojson_of]
(** Template describing the types of source changes to trigger a build.

Branch and tag names in trigger templates are interpreted as regular
expressions. Any branch or tag change that matches that regular
expression will trigger a build.

One of 'trigger_template', 'github', 'pubsub_config', 'webhook_config' or 'source_to_build' must be provided. *)

type webhook_config = {
  secret : string prop;
      (** Resource name for the secret required as a URL parameter. *)
}
[@@deriving yojson_of]
(** WebhookConfig describes the configuration of a trigger that creates
a build whenever a webhook is sent to a trigger's webhook URL.

One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided. *)

type google_cloudbuild_trigger = {
  description : string prop option; [@option]
      (** Human-readable description of the trigger. *)
  disabled : bool prop option; [@option]
      (** Whether the trigger is disabled or not. If true, the trigger will never result in a build. *)
  filename : string prop option; [@option]
      (** Path, from the source root, to a file whose contents is used for the template.
Either a filename or build template must be provided. Set this only when using trigger_template or github.
When using Pub/Sub, Webhook or Manual set the file name using git_file_source instead. *)
  filter : string prop option; [@option]
      (** A Common Expression Language string. Used only with Pub/Sub and Webhook. *)
  id : string prop option; [@option]  (** id *)
  ignored_files : string prop list option; [@option]
      (** ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
extended with support for '**'.

If ignoredFiles and changed files are both empty, then they are not
used to determine whether or not to trigger a build.

If ignoredFiles is not empty, then we ignore any files that match any
of the ignored_file globs. If the change has no files that are outside
of the ignoredFiles globs, then we do not trigger a build. *)
  include_build_logs : string prop option; [@option]
      (** Build logs will be sent back to GitHub as part of the checkrun
result.  Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
INCLUDE_BUILD_LOGS_WITH_STATUS Possible values: [INCLUDE_BUILD_LOGS_UNSPECIFIED, INCLUDE_BUILD_LOGS_WITH_STATUS] *)
  included_files : string prop list option; [@option]
      (** ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
extended with support for '**'.

If any of the files altered in the commit pass the ignoredFiles filter
and includedFiles is empty, then as far as this filter is concerned, we
should trigger the build.

If any of the files altered in the commit pass the ignoredFiles filter
and includedFiles is not empty, then we make sure that at least one of
those files matches a includedFiles glob. If not, then we do not trigger
a build. *)
  location : string prop option; [@option]
      (** The [Cloud Build location](https://cloud.google.com/build/docs/locations) for the trigger.
If not specified, global is used. *)
  name : string prop option; [@option]
      (** Name of the trigger. Must be unique within the project. *)
  project : string prop option; [@option]  (** project *)
  service_account : string prop option; [@option]
      (** The service account used for all user-controlled operations including
triggers.patch, triggers.run, builds.create, and builds.cancel.

If no service account is set, then the standard Cloud Build service account
([PROJECT_NUM]@system.gserviceaccount.com) will be used instead.

Format: projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL} *)
  substitutions : (string * string prop) list option; [@option]
      (** Substitutions data for Build resource. *)
  tags : string prop list option; [@option]
      (** Tags for annotation of a BuildTrigger *)
  approval_config : approval_config list;
  bitbucket_server_trigger_config :
    bitbucket_server_trigger_config list;
  build : build list;
  git_file_source : git_file_source list;
  github : github list;
  pubsub_config : pubsub_config list;
  repository_event_config : repository_event_config list;
  source_to_build : source_to_build list;
  timeouts : timeouts option;
  trigger_template : trigger_template list;
  webhook_config : webhook_config list;
}
[@@deriving yojson_of]
(** google_cloudbuild_trigger *)

let approval_config ?approval_required () : approval_config =
  { approval_required }

let bitbucket_server_trigger_config__pull_request ?comment_control
    ?invert_regex ~branch () :
    bitbucket_server_trigger_config__pull_request =
  { branch; comment_control; invert_regex }

let bitbucket_server_trigger_config__push ?branch ?invert_regex ?tag
    () : bitbucket_server_trigger_config__push =
  { branch; invert_regex; tag }

let bitbucket_server_trigger_config ~bitbucket_server_config_resource
    ~project_key ~repo_slug ~pull_request ~push () :
    bitbucket_server_trigger_config =
  {
    bitbucket_server_config_resource;
    project_key;
    repo_slug;
    pull_request;
    push;
  }

let build__artifacts__maven_artifacts ?artifact_id ?group_id ?path
    ?repository ?version () : build__artifacts__maven_artifacts =
  { artifact_id; group_id; path; repository; version }

let build__artifacts__npm_packages ?package_path ?repository () :
    build__artifacts__npm_packages =
  { package_path; repository }

let build__artifacts__objects ?location ?paths () :
    build__artifacts__objects =
  { location; paths }

let build__artifacts__python_packages ?paths ?repository () :
    build__artifacts__python_packages =
  { paths; repository }

let build__artifacts ?images ~maven_artifacts ~npm_packages ~objects
    ~python_packages () : build__artifacts =
  { images; maven_artifacts; npm_packages; objects; python_packages }

let build__available_secrets__secret_manager ~env ~version_name () :
    build__available_secrets__secret_manager =
  { env; version_name }

let build__available_secrets ~secret_manager () :
    build__available_secrets =
  { secret_manager }

let build__options__volumes ?name ?path () : build__options__volumes
    =
  { name; path }

let build__options ?disk_size_gb ?dynamic_substitutions ?env
    ?log_streaming_option ?logging ?machine_type
    ?requested_verify_option ?secret_env ?source_provenance_hash
    ?substitution_option ?worker_pool ~volumes () : build__options =
  {
    disk_size_gb;
    dynamic_substitutions;
    env;
    log_streaming_option;
    logging;
    machine_type;
    requested_verify_option;
    secret_env;
    source_provenance_hash;
    substitution_option;
    worker_pool;
    volumes;
  }

let build__secret ?secret_env ~kms_key_name () : build__secret =
  { kms_key_name; secret_env }

let build__source__repo_source ?branch_name ?commit_sha ?dir
    ?invert_regex ?project_id ?substitutions ?tag_name ~repo_name ()
    : build__source__repo_source =
  {
    branch_name;
    commit_sha;
    dir;
    invert_regex;
    project_id;
    repo_name;
    substitutions;
    tag_name;
  }

let build__source__storage_source ?generation ~bucket ~object_ () :
    build__source__storage_source =
  { bucket; generation; object_ }

let build__source ~repo_source ~storage_source () : build__source =
  { repo_source; storage_source }

let build__step__volumes ~name ~path () : build__step__volumes =
  { name; path }

let build__step ?allow_exit_codes ?allow_failure ?args ?dir
    ?entrypoint ?env ?id ?script ?secret_env ?timeout ?timing
    ?wait_for ~name ~volumes () : build__step =
  {
    allow_exit_codes;
    allow_failure;
    args;
    dir;
    entrypoint;
    env;
    id;
    name;
    script;
    secret_env;
    timeout;
    timing;
    wait_for;
    volumes;
  }

let build ?images ?logs_bucket ?queue_ttl ?substitutions ?tags
    ?timeout ~artifacts ~available_secrets ~options ~secret ~source
    ~step () : build =
  {
    images;
    logs_bucket;
    queue_ttl;
    substitutions;
    tags;
    timeout;
    artifacts;
    available_secrets;
    options;
    secret;
    source;
    step;
  }

let git_file_source ?bitbucket_server_config
    ?github_enterprise_config ?repository ?revision ?uri ~path
    ~repo_type () : git_file_source =
  {
    bitbucket_server_config;
    github_enterprise_config;
    path;
    repo_type;
    repository;
    revision;
    uri;
  }

let github__pull_request ?comment_control ?invert_regex ~branch () :
    github__pull_request =
  { branch; comment_control; invert_regex }

let github__push ?branch ?invert_regex ?tag () : github__push =
  { branch; invert_regex; tag }

let github ?enterprise_config_resource_name ?name ?owner
    ~pull_request ~push () : github =
  {
    enterprise_config_resource_name;
    name;
    owner;
    pull_request;
    push;
  }

let pubsub_config ?service_account_email ~topic () : pubsub_config =
  { service_account_email; topic }

let repository_event_config__pull_request ?branch ?comment_control
    ?invert_regex () : repository_event_config__pull_request =
  { branch; comment_control; invert_regex }

let repository_event_config__push ?branch ?invert_regex ?tag () :
    repository_event_config__push =
  { branch; invert_regex; tag }

let repository_event_config ?repository ~pull_request ~push () :
    repository_event_config =
  { repository; pull_request; push }

let source_to_build ?bitbucket_server_config
    ?github_enterprise_config ?repository ?uri ~ref ~repo_type () :
    source_to_build =
  {
    bitbucket_server_config;
    github_enterprise_config;
    ref;
    repo_type;
    repository;
    uri;
  }

let timeouts ?create ?delete ?update () : timeouts =
  { create; delete; update }

let trigger_template ?branch_name ?commit_sha ?dir ?invert_regex
    ?project_id ?repo_name ?tag_name () : trigger_template =
  {
    branch_name;
    commit_sha;
    dir;
    invert_regex;
    project_id;
    repo_name;
    tag_name;
  }

let webhook_config ~secret () : webhook_config = { secret }

let google_cloudbuild_trigger ?description ?disabled ?filename
    ?filter ?id ?ignored_files ?include_build_logs ?included_files
    ?location ?name ?project ?service_account ?substitutions ?tags
    ?timeouts ~approval_config ~bitbucket_server_trigger_config
    ~build ~git_file_source ~github ~pubsub_config
    ~repository_event_config ~source_to_build ~trigger_template
    ~webhook_config () : google_cloudbuild_trigger =
  {
    description;
    disabled;
    filename;
    filter;
    id;
    ignored_files;
    include_build_logs;
    included_files;
    location;
    name;
    project;
    service_account;
    substitutions;
    tags;
    approval_config;
    bitbucket_server_trigger_config;
    build;
    git_file_source;
    github;
    pubsub_config;
    repository_event_config;
    source_to_build;
    timeouts;
    trigger_template;
    webhook_config;
  }

type t = {
  create_time : string prop;
  description : string prop;
  disabled : bool prop;
  filename : string prop;
  filter : string prop;
  id : string prop;
  ignored_files : string list prop;
  include_build_logs : string prop;
  included_files : string list prop;
  location : string prop;
  name : string prop;
  project : string prop;
  service_account : string prop;
  substitutions : (string * string) list prop;
  tags : string list prop;
  trigger_id : string prop;
}

let make ?description ?disabled ?filename ?filter ?id ?ignored_files
    ?include_build_logs ?included_files ?location ?name ?project
    ?service_account ?substitutions ?tags ?timeouts ~approval_config
    ~bitbucket_server_trigger_config ~build ~git_file_source ~github
    ~pubsub_config ~repository_event_config ~source_to_build
    ~trigger_template ~webhook_config __id =
  let __type = "google_cloudbuild_trigger" in
  let __attrs =
    ({
       create_time = Prop.computed __type __id "create_time";
       description = Prop.computed __type __id "description";
       disabled = Prop.computed __type __id "disabled";
       filename = Prop.computed __type __id "filename";
       filter = Prop.computed __type __id "filter";
       id = Prop.computed __type __id "id";
       ignored_files = Prop.computed __type __id "ignored_files";
       include_build_logs =
         Prop.computed __type __id "include_build_logs";
       included_files = Prop.computed __type __id "included_files";
       location = Prop.computed __type __id "location";
       name = Prop.computed __type __id "name";
       project = Prop.computed __type __id "project";
       service_account = Prop.computed __type __id "service_account";
       substitutions = Prop.computed __type __id "substitutions";
       tags = Prop.computed __type __id "tags";
       trigger_id = Prop.computed __type __id "trigger_id";
     }
      : t)
  in
  {
    Tf_core.id = __id;
    type_ = __type;
    json =
      yojson_of_google_cloudbuild_trigger
        (google_cloudbuild_trigger ?description ?disabled ?filename
           ?filter ?id ?ignored_files ?include_build_logs
           ?included_files ?location ?name ?project ?service_account
           ?substitutions ?tags ?timeouts ~approval_config
           ~bitbucket_server_trigger_config ~build ~git_file_source
           ~github ~pubsub_config ~repository_event_config
           ~source_to_build ~trigger_template ~webhook_config ());
    attrs = __attrs;
  }

let register ?tf_module ?description ?disabled ?filename ?filter ?id
    ?ignored_files ?include_build_logs ?included_files ?location
    ?name ?project ?service_account ?substitutions ?tags ?timeouts
    ~approval_config ~bitbucket_server_trigger_config ~build
    ~git_file_source ~github ~pubsub_config ~repository_event_config
    ~source_to_build ~trigger_template ~webhook_config __id =
  let (r : _ Tf_core.resource) =
    make ?description ?disabled ?filename ?filter ?id ?ignored_files
      ?include_build_logs ?included_files ?location ?name ?project
      ?service_account ?substitutions ?tags ?timeouts
      ~approval_config ~bitbucket_server_trigger_config ~build
      ~git_file_source ~github ~pubsub_config
      ~repository_event_config ~source_to_build ~trigger_template
      ~webhook_config __id
  in
  Resource.add ?tf_module ~type_:r.type_ ~id:r.id r.json;
  r.attrs
