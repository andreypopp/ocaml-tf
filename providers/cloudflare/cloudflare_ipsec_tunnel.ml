(* DO NOT EDIT, GENERATED AUTOMATICALLY *)

open! Tf_core

type cloudflare_ipsec_tunnel = {
  account_id : string prop option; [@option]
      (** The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.** *)
  allow_null_cipher : bool prop option; [@option]
      (** Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`. *)
  cloudflare_endpoint : string prop;
      (** IP address assigned to the Cloudflare side of the IPsec tunnel. *)
  customer_endpoint : string prop;
      (** IP address assigned to the customer side of the IPsec tunnel. *)
  description : string prop option; [@option]
      (** An optional description of the IPsec tunnel. *)
  fqdn_id : string prop option; [@option]
      (** `remote_id` in the form of a fqdn. This value is generated by cloudflare. *)
  health_check_enabled : bool prop option; [@option]
      (** Specifies if ICMP tunnel health checks are enabled. Default: `true`. *)
  health_check_target : string prop option; [@option]
      (** The IP address of the customer endpoint that will receive tunnel health checks. Default: `<customer_gre_endpoint>`. *)
  health_check_type : string prop option; [@option]
      (** Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`. *)
  hex_id : string prop option; [@option]
      (** `remote_id` as a hex string. This value is generated by cloudflare. *)
  id : string prop option; [@option]  (** id *)
  interface_address : string prop;
      (** 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel. *)
  name : string prop;  (** Name of the IPsec tunnel. *)
  psk : string prop option; [@option]
      (** Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated. *)
  remote_id : string prop option; [@option]
      (** ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare. *)
  user_id : string prop option; [@option]
      (** `remote_id` in the form of an email address. This value is generated by cloudflare. *)
}
[@@deriving yojson_of]
(** Provides a resource, that manages IPsec tunnels for Magic Transit.
 *)

let cloudflare_ipsec_tunnel ?account_id ?allow_null_cipher
    ?description ?fqdn_id ?health_check_enabled ?health_check_target
    ?health_check_type ?hex_id ?id ?psk ?remote_id ?user_id
    ~cloudflare_endpoint ~customer_endpoint ~interface_address ~name
    () : cloudflare_ipsec_tunnel =
  {
    account_id;
    allow_null_cipher;
    cloudflare_endpoint;
    customer_endpoint;
    description;
    fqdn_id;
    health_check_enabled;
    health_check_target;
    health_check_type;
    hex_id;
    id;
    interface_address;
    name;
    psk;
    remote_id;
    user_id;
  }

type t = {
  account_id : string prop;
  allow_null_cipher : bool prop;
  cloudflare_endpoint : string prop;
  customer_endpoint : string prop;
  description : string prop;
  fqdn_id : string prop;
  health_check_enabled : bool prop;
  health_check_target : string prop;
  health_check_type : string prop;
  hex_id : string prop;
  id : string prop;
  interface_address : string prop;
  name : string prop;
  psk : string prop;
  remote_id : string prop;
  user_id : string prop;
}

let make ?account_id ?allow_null_cipher ?description ?fqdn_id
    ?health_check_enabled ?health_check_target ?health_check_type
    ?hex_id ?id ?psk ?remote_id ?user_id ~cloudflare_endpoint
    ~customer_endpoint ~interface_address ~name __id =
  let __type = "cloudflare_ipsec_tunnel" in
  let __attrs =
    ({
       account_id = Prop.computed __type __id "account_id";
       allow_null_cipher =
         Prop.computed __type __id "allow_null_cipher";
       cloudflare_endpoint =
         Prop.computed __type __id "cloudflare_endpoint";
       customer_endpoint =
         Prop.computed __type __id "customer_endpoint";
       description = Prop.computed __type __id "description";
       fqdn_id = Prop.computed __type __id "fqdn_id";
       health_check_enabled =
         Prop.computed __type __id "health_check_enabled";
       health_check_target =
         Prop.computed __type __id "health_check_target";
       health_check_type =
         Prop.computed __type __id "health_check_type";
       hex_id = Prop.computed __type __id "hex_id";
       id = Prop.computed __type __id "id";
       interface_address =
         Prop.computed __type __id "interface_address";
       name = Prop.computed __type __id "name";
       psk = Prop.computed __type __id "psk";
       remote_id = Prop.computed __type __id "remote_id";
       user_id = Prop.computed __type __id "user_id";
     }
      : t)
  in
  {
    Tf_core.id = __id;
    type_ = __type;
    json =
      yojson_of_cloudflare_ipsec_tunnel
        (cloudflare_ipsec_tunnel ?account_id ?allow_null_cipher
           ?description ?fqdn_id ?health_check_enabled
           ?health_check_target ?health_check_type ?hex_id ?id ?psk
           ?remote_id ?user_id ~cloudflare_endpoint
           ~customer_endpoint ~interface_address ~name ());
    attrs = __attrs;
  }

let register ?tf_module ?account_id ?allow_null_cipher ?description
    ?fqdn_id ?health_check_enabled ?health_check_target
    ?health_check_type ?hex_id ?id ?psk ?remote_id ?user_id
    ~cloudflare_endpoint ~customer_endpoint ~interface_address ~name
    __id =
  let (r : _ Tf_core.resource) =
    make ?account_id ?allow_null_cipher ?description ?fqdn_id
      ?health_check_enabled ?health_check_target ?health_check_type
      ?hex_id ?id ?psk ?remote_id ?user_id ~cloudflare_endpoint
      ~customer_endpoint ~interface_address ~name __id
  in
  Resource.add ?tf_module ~type_:r.type_ ~id:r.id r.json;
  r.attrs
