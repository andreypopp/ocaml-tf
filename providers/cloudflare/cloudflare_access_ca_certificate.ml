(* DO NOT EDIT, GENERATED AUTOMATICALLY *)

open! Tf_core

type cloudflare_access_ca_certificate = {
  account_id : string prop option; [@option]
      (** The account identifier to target for the resource. Conflicts with `zone_id`. *)
  application_id : string prop;
      (** The Access Application ID to associate with the CA certificate. *)
  id : string prop option; [@option]  (** id *)
  zone_id : string prop option; [@option]
      (** The zone identifier to target for the resource. Conflicts with `account_id`. *)
}
[@@deriving yojson_of]
(** Cloudflare Access can replace traditional SSH key models with
short-lived certificates issued to your users based on the token
generated by their Access login.
 *)

let cloudflare_access_ca_certificate ?account_id ?id ?zone_id
    ~application_id () : cloudflare_access_ca_certificate =
  { account_id; application_id; id; zone_id }

type t = {
  account_id : string prop;
  application_id : string prop;
  aud : string prop;
  id : string prop;
  public_key : string prop;
  zone_id : string prop;
}

let make ?account_id ?id ?zone_id ~application_id __id =
  let __type = "cloudflare_access_ca_certificate" in
  let __attrs =
    ({
       account_id = Prop.computed __type __id "account_id";
       application_id = Prop.computed __type __id "application_id";
       aud = Prop.computed __type __id "aud";
       id = Prop.computed __type __id "id";
       public_key = Prop.computed __type __id "public_key";
       zone_id = Prop.computed __type __id "zone_id";
     }
      : t)
  in
  {
    Tf_core.id = __id;
    type_ = __type;
    json =
      yojson_of_cloudflare_access_ca_certificate
        (cloudflare_access_ca_certificate ?account_id ?id ?zone_id
           ~application_id ());
    attrs = __attrs;
  }

let register ?tf_module ?account_id ?id ?zone_id ~application_id __id
    =
  let (r : _ Tf_core.resource) =
    make ?account_id ?id ?zone_id ~application_id __id
  in
  Resource.add ?tf_module ~type_:r.type_ ~id:r.id r.json;
  r.attrs
