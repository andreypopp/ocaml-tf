(* DO NOT EDIT, GENERATED AUTOMATICALLY *)

[@@@ocaml.warning "-33-27-26"]

open! Tf.Prelude

type google_privateca_certificate__config__public_key = {
  format : string;
      (** The format of the public key. Currently, only PEM format is supported. Possible values: [KEY_TYPE_UNSPECIFIED, PEM] *)
  key : string option; [@option]
      (** Required. A public key. When this is specified in a request, the padding and encoding can be any of the options described by the respective 'KeyType' value. When this is generated by the service, it will always be an RFC 5280 SubjectPublicKeyInfo structure containing an algorithm identifier and a key. A base64-encoded string. *)
}
[@@deriving yojson_of]
(** A PublicKey describes a public key. *)

type google_privateca_certificate__config__subject_config__subject = {
  common_name : string;
      (** The common name of the distinguished name. *)
  country_code : string option; [@option]
      (** The country code of the subject. *)
  locality : string option; [@option]
      (** The locality or city of the subject. *)
  organization : string;  (** The organization of the subject. *)
  organizational_unit : string option; [@option]
      (** The organizational unit of the subject. *)
  postal_code : string option; [@option]
      (** The postal code of the subject. *)
  province : string option; [@option]
      (** The province, territory, or regional state of the subject. *)
  street_address : string option; [@option]
      (** The street address of the subject. *)
}
[@@deriving yojson_of]
(** Contains distinguished name fields such as the location and organization. *)

type google_privateca_certificate__config__subject_config__subject_alt_name = {
  dns_names : string list option; [@option]
      (** Contains only valid, fully-qualified host names. *)
  email_addresses : string list option; [@option]
      (** Contains only valid RFC 2822 E-mail addresses. *)
  ip_addresses : string list option; [@option]
      (** Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses. *)
  uris : string list option; [@option]
      (** Contains only valid RFC 3986 URIs. *)
}
[@@deriving yojson_of]
(** The subject alternative name fields. *)

type google_privateca_certificate__config__subject_config = {
  subject :
    google_privateca_certificate__config__subject_config__subject
    list;
  subject_alt_name :
    google_privateca_certificate__config__subject_config__subject_alt_name
    list;
}
[@@deriving yojson_of]
(** Specifies some of the values in a certificate that are related to the subject. *)

type google_privateca_certificate__config__x509_config__additional_extensions__object_id = {
  object_id_path : float list;
      (** An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages. *)
}
[@@deriving yojson_of]
(** Describes values that are relevant in a CA certificate. *)

type google_privateca_certificate__config__x509_config__additional_extensions = {
  critical : bool;
      (** Indicates whether or not this extension is critical (i.e., if the client does not know how to
handle this extension, the client should consider this to be an error). *)
  value : string;
      (** The value of this X.509 extension. A base64-encoded string. *)
  object_id :
    google_privateca_certificate__config__x509_config__additional_extensions__object_id
    list;
}
[@@deriving yojson_of]
(** Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs. *)

type google_privateca_certificate__config__x509_config__ca_options = {
  is_ca : bool option; [@option]
      (** When true, the CA in Basic Constraints extension will be set to true. *)
  max_issuer_path_length : float option; [@option]
      (** Refers to the path length constraint in Basic Constraints extension. For a CA certificate, this value describes the depth of
subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. *)
  non_ca : bool option; [@option]
      (** When true, the CA in Basic Constraints extension will be set to false.
If both 'is_ca' and 'non_ca' are unset, the extension will be omitted from the CA certificate. *)
  zero_max_issuer_path_length : bool option; [@option]
      (** When true, the path length constraint in Basic Constraints extension will be set to 0.
if both 'max_issuer_path_length' and 'zero_max_issuer_path_length' are unset,
the max path length will be omitted from the CA certificate. *)
}
[@@deriving yojson_of]
(** Describes values that are relevant in a CA certificate. *)

type google_privateca_certificate__config__x509_config__key_usage__base_key_usage = {
  cert_sign : bool option; [@option]
      (** The key may be used to sign certificates. *)
  content_commitment : bool option; [@option]
      (** The key may be used for cryptographic commitments. Note that this may also be referred to as non-repudiation. *)
  crl_sign : bool option; [@option]
      (** The key may be used sign certificate revocation lists. *)
  data_encipherment : bool option; [@option]
      (** The key may be used to encipher data. *)
  decipher_only : bool option; [@option]
      (** The key may be used to decipher only. *)
  digital_signature : bool option; [@option]
      (** The key may be used for digital signatures. *)
  encipher_only : bool option; [@option]
      (** The key may be used to encipher only. *)
  key_agreement : bool option; [@option]
      (** The key may be used in a key agreement protocol. *)
  key_encipherment : bool option; [@option]
      (** The key may be used to encipher other keys. *)
}
[@@deriving yojson_of]
(** Describes high-level ways in which a key may be used. *)

type google_privateca_certificate__config__x509_config__key_usage__extended_key_usage = {
  client_auth : bool option; [@option]
      (** Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as TLS WWW client authentication, though regularly used for non-WWW TLS. *)
  code_signing : bool option; [@option]
      (** Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as Signing of downloadable executable code client authentication. *)
  email_protection : bool option; [@option]
      (** Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as Email protection. *)
  ocsp_signing : bool option; [@option]
      (** Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as Signing OCSP responses. *)
  server_auth : bool option; [@option]
      (** Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as TLS WWW server authentication, though regularly used for non-WWW TLS. *)
  time_stamping : bool option; [@option]
      (** Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as Binding the hash of an object to a time. *)
}
[@@deriving yojson_of]
(** Describes high-level ways in which a key may be used. *)

type google_privateca_certificate__config__x509_config__key_usage__unknown_extended_key_usages = {
  object_id_path : float list;
      (** An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages. *)
}
[@@deriving yojson_of]
(** An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages. *)

type google_privateca_certificate__config__x509_config__key_usage = {
  base_key_usage :
    google_privateca_certificate__config__x509_config__key_usage__base_key_usage
    list;
  extended_key_usage :
    google_privateca_certificate__config__x509_config__key_usage__extended_key_usage
    list;
  unknown_extended_key_usages :
    google_privateca_certificate__config__x509_config__key_usage__unknown_extended_key_usages
    list;
}
[@@deriving yojson_of]
(** Indicates the intended use for keys that correspond to a certificate. *)

type google_privateca_certificate__config__x509_config__name_constraints = {
  critical : bool;
      (** Indicates whether or not the name constraints are marked critical. *)
  excluded_dns_names : string list option; [@option]
      (** Contains excluded DNS names. Any DNS name that can be
constructed by simply adding zero or more labels to
the left-hand side of the name satisfies the name constraint.
For example, 'example.com', 'www.example.com', 'www.sub.example.com'
would satisfy 'example.com' while 'example1.com' does not. *)
  excluded_email_addresses : string list option; [@option]
      (** Contains the excluded email addresses. The value can be a particular
email address, a hostname to indicate all email addresses on that host or
a domain with a leading period (e.g. '.example.com') to indicate
all email addresses in that domain. *)
  excluded_ip_ranges : string list option; [@option]
      (** Contains the excluded IP ranges. For IPv4 addresses, the ranges
are expressed using CIDR notation as specified in RFC 4632.
For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
addresses. *)
  excluded_uris : string list option; [@option]
      (** Contains the excluded URIs that apply to the host part of the name.
The value can be a hostname or a domain with a
leading period (like '.example.com') *)
  permitted_dns_names : string list option; [@option]
      (** Contains permitted DNS names. Any DNS name that can be
constructed by simply adding zero or more labels to
the left-hand side of the name satisfies the name constraint.
For example, 'example.com', 'www.example.com', 'www.sub.example.com'
would satisfy 'example.com' while 'example1.com' does not. *)
  permitted_email_addresses : string list option; [@option]
      (** Contains the permitted email addresses. The value can be a particular
email address, a hostname to indicate all email addresses on that host or
a domain with a leading period (e.g. '.example.com') to indicate
all email addresses in that domain. *)
  permitted_ip_ranges : string list option; [@option]
      (** Contains the permitted IP ranges. For IPv4 addresses, the ranges
are expressed using CIDR notation as specified in RFC 4632.
For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
addresses. *)
  permitted_uris : string list option; [@option]
      (** Contains the permitted URIs that apply to the host part of the name.
The value can be a hostname or a domain with a
leading period (like '.example.com') *)
}
[@@deriving yojson_of]
(** Describes the X.509 name constraints extension. *)

type google_privateca_certificate__config__x509_config__policy_ids = {
  object_id_path : float list;
      (** An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages. *)
}
[@@deriving yojson_of]
(** Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4. *)

type google_privateca_certificate__config__x509_config = {
  aia_ocsp_servers : string list option; [@option]
      (** Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
Authority Information Access extension in the certificate. *)
  additional_extensions :
    google_privateca_certificate__config__x509_config__additional_extensions
    list;
  ca_options :
    google_privateca_certificate__config__x509_config__ca_options
    list;
  key_usage :
    google_privateca_certificate__config__x509_config__key_usage list;
  name_constraints :
    google_privateca_certificate__config__x509_config__name_constraints
    list;
  policy_ids :
    google_privateca_certificate__config__x509_config__policy_ids
    list;
}
[@@deriving yojson_of]
(** Describes how some of the technical X.509 fields in a certificate should be populated. *)

type google_privateca_certificate__config = {
  public_key : google_privateca_certificate__config__public_key list;
  subject_config :
    google_privateca_certificate__config__subject_config list;
  x509_config :
    google_privateca_certificate__config__x509_config list;
}
[@@deriving yojson_of]
(** The config used to create a self-signed X.509 certificate or CSR. *)

type google_privateca_certificate__timeouts = {
  create : string option; [@option]  (** create *)
  delete : string option; [@option]  (** delete *)
  update : string option; [@option]  (** update *)
}
[@@deriving yojson_of]
(** google_privateca_certificate__timeouts *)

type google_privateca_certificate__certificate_description__x509_description__policy_ids = {
  object_id_path : float list;  (** object_id_path *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__x509_description__name_constraints = {
  critical : bool;  (** critical *)
  excluded_dns_names : string list;  (** excluded_dns_names *)
  excluded_email_addresses : string list;
      (** excluded_email_addresses *)
  excluded_ip_ranges : string list;  (** excluded_ip_ranges *)
  excluded_uris : string list;  (** excluded_uris *)
  permitted_dns_names : string list;  (** permitted_dns_names *)
  permitted_email_addresses : string list;
      (** permitted_email_addresses *)
  permitted_ip_ranges : string list;  (** permitted_ip_ranges *)
  permitted_uris : string list;  (** permitted_uris *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__x509_description__key_usage__unknown_extended_key_usages = {
  object_id_path : float list;  (** object_id_path *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__x509_description__key_usage__extended_key_usage = {
  client_auth : bool;  (** client_auth *)
  code_signing : bool;  (** code_signing *)
  email_protection : bool;  (** email_protection *)
  ocsp_signing : bool;  (** ocsp_signing *)
  server_auth : bool;  (** server_auth *)
  time_stamping : bool;  (** time_stamping *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__x509_description__key_usage__base_key_usage = {
  cert_sign : bool;  (** cert_sign *)
  content_commitment : bool;  (** content_commitment *)
  crl_sign : bool;  (** crl_sign *)
  data_encipherment : bool;  (** data_encipherment *)
  decipher_only : bool;  (** decipher_only *)
  digital_signature : bool;  (** digital_signature *)
  encipher_only : bool;  (** encipher_only *)
  key_agreement : bool;  (** key_agreement *)
  key_encipherment : bool;  (** key_encipherment *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__x509_description__key_usage = {
  base_key_usage :
    google_privateca_certificate__certificate_description__x509_description__key_usage__base_key_usage
    list;
      (** base_key_usage *)
  extended_key_usage :
    google_privateca_certificate__certificate_description__x509_description__key_usage__extended_key_usage
    list;
      (** extended_key_usage *)
  unknown_extended_key_usages :
    google_privateca_certificate__certificate_description__x509_description__key_usage__unknown_extended_key_usages
    list;
      (** unknown_extended_key_usages *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__x509_description__ca_options = {
  is_ca : bool;  (** is_ca *)
  max_issuer_path_length : float;  (** max_issuer_path_length *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__x509_description__additional_extensions__object_id = {
  object_id_path : float list;  (** object_id_path *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__x509_description__additional_extensions = {
  critical : bool;  (** critical *)
  object_id :
    google_privateca_certificate__certificate_description__x509_description__additional_extensions__object_id
    list;
      (** object_id *)
  value : string;  (** value *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__x509_description = {
  additional_extensions :
    google_privateca_certificate__certificate_description__x509_description__additional_extensions
    list;
      (** additional_extensions *)
  aia_ocsp_servers : string list;  (** aia_ocsp_servers *)
  ca_options :
    google_privateca_certificate__certificate_description__x509_description__ca_options
    list;
      (** ca_options *)
  key_usage :
    google_privateca_certificate__certificate_description__x509_description__key_usage
    list;
      (** key_usage *)
  name_constraints :
    google_privateca_certificate__certificate_description__x509_description__name_constraints
    list;
      (** name_constraints *)
  policy_ids :
    google_privateca_certificate__certificate_description__x509_description__policy_ids
    list;
      (** policy_ids *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__subject_key_id = {
  key_id : string;  (** key_id *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__subject_description__subject_alt_name__custom_sans__obect_id = {
  object_id_path : float list;  (** object_id_path *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__subject_description__subject_alt_name__custom_sans = {
  critical : bool;  (** critical *)
  obect_id :
    google_privateca_certificate__certificate_description__subject_description__subject_alt_name__custom_sans__obect_id
    list;
      (** obect_id *)
  value : string;  (** value *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__subject_description__subject_alt_name = {
  custom_sans :
    google_privateca_certificate__certificate_description__subject_description__subject_alt_name__custom_sans
    list;
      (** custom_sans *)
  dns_names : string list;  (** dns_names *)
  email_addresses : string list;  (** email_addresses *)
  ip_addresses : string list;  (** ip_addresses *)
  uris : string list;  (** uris *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__subject_description__subject = {
  common_name : string;  (** common_name *)
  country_code : string;  (** country_code *)
  locality : string;  (** locality *)
  organization : string;  (** organization *)
  organizational_unit : string;  (** organizational_unit *)
  postal_code : string;  (** postal_code *)
  province : string;  (** province *)
  street_address : string;  (** street_address *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__subject_description = {
  hex_serial_number : string;  (** hex_serial_number *)
  lifetime : string;  (** lifetime *)
  not_after_time : string;  (** not_after_time *)
  not_before_time : string;  (** not_before_time *)
  subject :
    google_privateca_certificate__certificate_description__subject_description__subject
    list;
      (** subject *)
  subject_alt_name :
    google_privateca_certificate__certificate_description__subject_description__subject_alt_name
    list;
      (** subject_alt_name *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__public_key = {
  format : string;  (** format *)
  key : string;  (** key *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__cert_fingerprint = {
  sha256_hash : string;  (** sha256_hash *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description__authority_key_id = {
  key_id : string;  (** key_id *)
}
[@@deriving yojson_of]

type google_privateca_certificate__certificate_description = {
  aia_issuing_certificate_urls : string list;
      (** aia_issuing_certificate_urls *)
  authority_key_id :
    google_privateca_certificate__certificate_description__authority_key_id
    list;
      (** authority_key_id *)
  cert_fingerprint :
    google_privateca_certificate__certificate_description__cert_fingerprint
    list;
      (** cert_fingerprint *)
  crl_distribution_points : string list;
      (** crl_distribution_points *)
  public_key :
    google_privateca_certificate__certificate_description__public_key
    list;
      (** public_key *)
  subject_description :
    google_privateca_certificate__certificate_description__subject_description
    list;
      (** subject_description *)
  subject_key_id :
    google_privateca_certificate__certificate_description__subject_key_id
    list;
      (** subject_key_id *)
  x509_description :
    google_privateca_certificate__certificate_description__x509_description
    list;
      (** x509_description *)
}
[@@deriving yojson_of]

type google_privateca_certificate__revocation_details = {
  revocation_state : string;  (** revocation_state *)
  revocation_time : string;  (** revocation_time *)
}
[@@deriving yojson_of]

type google_privateca_certificate = {
  certificate_authority : string option; [@option]
      (** The Certificate Authority ID that should issue the certificate. For example, to issue a Certificate from
a Certificate Authority with resource name 'projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca',
argument 'pool' should be set to 'projects/my-project/locations/us-central1/caPools/my-pool', argument 'certificate_authority'
should be set to 'my-ca'. *)
  certificate_template : string option; [@option]
      (** The resource name for a CertificateTemplate used to issue this certificate,
in the format 'projects/*/locations/*/certificateTemplates/*'. If this is specified,
the caller must have the necessary permission to use this template. If this is
omitted, no template will be used. This template must be in the same location
as the Certificate. *)
  id : string option; [@option]  (** id *)
  labels : (string * string) list option; [@option]
      (** Labels with user-defined metadata to apply to this resource.


**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource. *)
  lifetime : string option; [@option]
      (** The desired lifetime of the CA certificate. Used to create the notBeforeTime and
notAfterTime fields inside an X.509 certificate. A duration in seconds with up to nine
fractional digits, terminated by 's'. Example: 3.5s. *)
  location : string;
      (** Location of the Certificate. A full list of valid locations can be found by
running 'gcloud privateca locations list'. *)
  name : string;  (** The name for this Certificate. *)
  pem_csr : string option; [@option]
      (** Immutable. A pem-encoded X.509 certificate signing request (CSR). *)
  pool : string;
      (** The name of the CaPool this Certificate belongs to. *)
  project : string option; [@option]  (** project *)
  config : google_privateca_certificate__config list;
  timeouts : google_privateca_certificate__timeouts option;
}
[@@deriving yojson_of]
(** google_privateca_certificate *)

let google_privateca_certificate ?certificate_authority
    ?certificate_template ?id ?labels ?lifetime ?pem_csr ?project
    ?timeouts ~location ~name ~pool ~config __resource_id =
  let __resource_type = "google_privateca_certificate" in
  let __resource =
    {
      certificate_authority;
      certificate_template;
      id;
      labels;
      lifetime;
      location;
      name;
      pem_csr;
      pool;
      project;
      config;
      timeouts;
    }
  in
  Resource.add ~type_:__resource_type ~id:__resource_id
    (yojson_of_google_privateca_certificate __resource);
  ()
