(* DO NOT EDIT, GENERATED AUTOMATICALLY *)

open! Tf_core

type baseline_result = {
  result : string prop list;
      [@default []] [@yojson_drop_default ( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : baseline_result) -> ()

let yojson_of_baseline_result =
  (function
   | { result = v_result } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if [] = v_result then bnds
         else
           let arg =
             (yojson_of_list (yojson_of_prop yojson_of_string))
               v_result
           in
           let bnd = "result", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : baseline_result -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_baseline_result

[@@@deriving.end]

type timeouts = {
  create : string prop option; [@option]
  delete : string prop option; [@option]
  read : string prop option; [@option]
  update : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : timeouts) -> ()

let yojson_of_timeouts =
  (function
   | {
       create = v_create;
       delete = v_delete;
       read = v_read;
       update = v_update;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_update with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "update", arg in
             bnd :: bnds
       in
       let bnds =
         match v_read with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "read", arg in
             bnd :: bnds
       in
       let bnds =
         match v_delete with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "delete", arg in
             bnd :: bnds
       in
       let bnds =
         match v_create with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "create", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : timeouts -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_timeouts

[@@@deriving.end]

type azurerm_mssql_database_vulnerability_assessment_rule_baseline = {
  baseline_name : string prop option; [@option]
  database_name : string prop;
  id : string prop option; [@option]
  rule_id : string prop;
  server_vulnerability_assessment_id : string prop;
  baseline_result : baseline_result list;
      [@default []] [@yojson_drop_default ( = )]
  timeouts : timeouts option;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       azurerm_mssql_database_vulnerability_assessment_rule_baseline) ->
  ()

let yojson_of_azurerm_mssql_database_vulnerability_assessment_rule_baseline
    =
  (function
   | {
       baseline_name = v_baseline_name;
       database_name = v_database_name;
       id = v_id;
       rule_id = v_rule_id;
       server_vulnerability_assessment_id =
         v_server_vulnerability_assessment_id;
       baseline_result = v_baseline_result;
       timeouts = v_timeouts;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_option yojson_of_timeouts v_timeouts in
         ("timeouts", arg) :: bnds
       in
       let bnds =
         if [] = v_baseline_result then bnds
         else
           let arg =
             (yojson_of_list yojson_of_baseline_result)
               v_baseline_result
           in
           let bnd = "baseline_result", arg in
           bnd :: bnds
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string
             v_server_vulnerability_assessment_id
         in
         ("server_vulnerability_assessment_id", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_rule_id in
         ("rule_id", arg) :: bnds
       in
       let bnds =
         match v_id with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "id", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_database_name in
         ("database_name", arg) :: bnds
       in
       let bnds =
         match v_baseline_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "baseline_name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : azurerm_mssql_database_vulnerability_assessment_rule_baseline ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_azurerm_mssql_database_vulnerability_assessment_rule_baseline

[@@@deriving.end]

let baseline_result ~result () : baseline_result = { result }

let timeouts ?create ?delete ?read ?update () : timeouts =
  { create; delete; read; update }

let azurerm_mssql_database_vulnerability_assessment_rule_baseline
    ?baseline_name ?id ?timeouts ~database_name ~rule_id
    ~server_vulnerability_assessment_id ~baseline_result () :
    azurerm_mssql_database_vulnerability_assessment_rule_baseline =
  {
    baseline_name;
    database_name;
    id;
    rule_id;
    server_vulnerability_assessment_id;
    baseline_result;
    timeouts;
  }

type t = {
  tf_name : string;
  baseline_name : string prop;
  database_name : string prop;
  id : string prop;
  rule_id : string prop;
  server_vulnerability_assessment_id : string prop;
}

let make ?baseline_name ?id ?timeouts ~database_name ~rule_id
    ~server_vulnerability_assessment_id ~baseline_result __id =
  let __type =
    "azurerm_mssql_database_vulnerability_assessment_rule_baseline"
  in
  let __attrs =
    ({
       tf_name = __id;
       baseline_name = Prop.computed __type __id "baseline_name";
       database_name = Prop.computed __type __id "database_name";
       id = Prop.computed __type __id "id";
       rule_id = Prop.computed __type __id "rule_id";
       server_vulnerability_assessment_id =
         Prop.computed __type __id
           "server_vulnerability_assessment_id";
     }
      : t)
  in
  {
    Tf_core.id = __id;
    type_ = __type;
    json =
      yojson_of_azurerm_mssql_database_vulnerability_assessment_rule_baseline
        (azurerm_mssql_database_vulnerability_assessment_rule_baseline
           ?baseline_name ?id ?timeouts ~database_name ~rule_id
           ~server_vulnerability_assessment_id ~baseline_result ());
    attrs = __attrs;
  }

let register ?tf_module ?baseline_name ?id ?timeouts ~database_name
    ~rule_id ~server_vulnerability_assessment_id ~baseline_result
    __id =
  let (r : _ Tf_core.resource) =
    make ?baseline_name ?id ?timeouts ~database_name ~rule_id
      ~server_vulnerability_assessment_id ~baseline_result __id
  in
  Resource.add ?tf_module ~type_:r.type_ ~id:r.id r.json;
  r.attrs
