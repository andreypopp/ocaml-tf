(* DO NOT EDIT, GENERATED AUTOMATICALLY *)

open! Tf_core

type recurring_scans = {
  email_subscription_admins_enabled : bool prop option; [@option]
  emails : string prop list option; [@option]
  enabled : bool prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : recurring_scans) -> ()

let yojson_of_recurring_scans =
  (function
   | {
       email_subscription_admins_enabled =
         v_email_subscription_admins_enabled;
       emails = v_emails;
       enabled = v_enabled;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_enabled with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "enabled", arg in
             bnd :: bnds
       in
       let bnds =
         match v_emails with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               yojson_of_list (yojson_of_prop yojson_of_string) v
             in
             let bnd = "emails", arg in
             bnd :: bnds
       in
       let bnds =
         match v_email_subscription_admins_enabled with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "email_subscription_admins_enabled", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : recurring_scans -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_recurring_scans

[@@@deriving.end]

type timeouts = {
  create : string prop option; [@option]
  delete : string prop option; [@option]
  read : string prop option; [@option]
  update : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : timeouts) -> ()

let yojson_of_timeouts =
  (function
   | {
       create = v_create;
       delete = v_delete;
       read = v_read;
       update = v_update;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_update with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "update", arg in
             bnd :: bnds
       in
       let bnds =
         match v_read with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "read", arg in
             bnd :: bnds
       in
       let bnds =
         match v_delete with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "delete", arg in
             bnd :: bnds
       in
       let bnds =
         match v_create with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "create", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : timeouts -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_timeouts

[@@@deriving.end]

type azurerm_synapse_workspace_vulnerability_assessment = {
  id : string prop option; [@option]
  storage_account_access_key : string prop option; [@option]
  storage_container_path : string prop;
  storage_container_sas_key : string prop option; [@option]
  workspace_security_alert_policy_id : string prop;
  recurring_scans : recurring_scans list;
  timeouts : timeouts option;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : azurerm_synapse_workspace_vulnerability_assessment) -> ()

let yojson_of_azurerm_synapse_workspace_vulnerability_assessment =
  (function
   | {
       id = v_id;
       storage_account_access_key = v_storage_account_access_key;
       storage_container_path = v_storage_container_path;
       storage_container_sas_key = v_storage_container_sas_key;
       workspace_security_alert_policy_id =
         v_workspace_security_alert_policy_id;
       recurring_scans = v_recurring_scans;
       timeouts = v_timeouts;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_option yojson_of_timeouts v_timeouts in
         ("timeouts", arg) :: bnds
       in
       let bnds =
         let arg =
           yojson_of_list yojson_of_recurring_scans v_recurring_scans
         in
         ("recurring_scans", arg) :: bnds
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string
             v_workspace_security_alert_policy_id
         in
         ("workspace_security_alert_policy_id", arg) :: bnds
       in
       let bnds =
         match v_storage_container_sas_key with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "storage_container_sas_key", arg in
             bnd :: bnds
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_storage_container_path
         in
         ("storage_container_path", arg) :: bnds
       in
       let bnds =
         match v_storage_account_access_key with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "storage_account_access_key", arg in
             bnd :: bnds
       in
       let bnds =
         match v_id with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "id", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : azurerm_synapse_workspace_vulnerability_assessment ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_azurerm_synapse_workspace_vulnerability_assessment

[@@@deriving.end]

let recurring_scans ?email_subscription_admins_enabled ?emails
    ?enabled () : recurring_scans =
  { email_subscription_admins_enabled; emails; enabled }

let timeouts ?create ?delete ?read ?update () : timeouts =
  { create; delete; read; update }

let azurerm_synapse_workspace_vulnerability_assessment ?id
    ?storage_account_access_key ?storage_container_sas_key ?timeouts
    ~storage_container_path ~workspace_security_alert_policy_id
    ~recurring_scans () :
    azurerm_synapse_workspace_vulnerability_assessment =
  {
    id;
    storage_account_access_key;
    storage_container_path;
    storage_container_sas_key;
    workspace_security_alert_policy_id;
    recurring_scans;
    timeouts;
  }

type t = {
  id : string prop;
  storage_account_access_key : string prop;
  storage_container_path : string prop;
  storage_container_sas_key : string prop;
  workspace_security_alert_policy_id : string prop;
}

let make ?id ?storage_account_access_key ?storage_container_sas_key
    ?timeouts ~storage_container_path
    ~workspace_security_alert_policy_id ~recurring_scans __id =
  let __type =
    "azurerm_synapse_workspace_vulnerability_assessment"
  in
  let __attrs =
    ({
       id = Prop.computed __type __id "id";
       storage_account_access_key =
         Prop.computed __type __id "storage_account_access_key";
       storage_container_path =
         Prop.computed __type __id "storage_container_path";
       storage_container_sas_key =
         Prop.computed __type __id "storage_container_sas_key";
       workspace_security_alert_policy_id =
         Prop.computed __type __id
           "workspace_security_alert_policy_id";
     }
      : t)
  in
  {
    Tf_core.id = __id;
    type_ = __type;
    json =
      yojson_of_azurerm_synapse_workspace_vulnerability_assessment
        (azurerm_synapse_workspace_vulnerability_assessment ?id
           ?storage_account_access_key ?storage_container_sas_key
           ?timeouts ~storage_container_path
           ~workspace_security_alert_policy_id ~recurring_scans ());
    attrs = __attrs;
  }

let register ?tf_module ?id ?storage_account_access_key
    ?storage_container_sas_key ?timeouts ~storage_container_path
    ~workspace_security_alert_policy_id ~recurring_scans __id =
  let (r : _ Tf_core.resource) =
    make ?id ?storage_account_access_key ?storage_container_sas_key
      ?timeouts ~storage_container_path
      ~workspace_security_alert_policy_id ~recurring_scans __id
  in
  Resource.add ?tf_module ~type_:r.type_ ~id:r.id r.json;
  r.attrs
