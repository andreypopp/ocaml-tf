(* DO NOT EDIT, GENERATED AUTOMATICALLY *)

open! Tf_core

type protected_resource__s3_bucket = {
  bucket_name : string prop;
  object_prefixes : string prop list option; [@option]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : protected_resource__s3_bucket) -> ()

let yojson_of_protected_resource__s3_bucket =
  (function
   | {
       bucket_name = v_bucket_name;
       object_prefixes = v_object_prefixes;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_object_prefixes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               yojson_of_list (yojson_of_prop yojson_of_string) v
             in
             let bnd = "object_prefixes", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_bucket_name in
         ("bucket_name", arg) :: bnds
       in
       `Assoc bnds
    : protected_resource__s3_bucket ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_protected_resource__s3_bucket

[@@@deriving.end]

type protected_resource = {
  s3_bucket : protected_resource__s3_bucket list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : protected_resource) -> ()

let yojson_of_protected_resource =
  (function
   | { s3_bucket = v_s3_bucket } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_s3_bucket then bnds
         else
           let arg =
             (yojson_of_list yojson_of_protected_resource__s3_bucket)
               v_s3_bucket
           in
           let bnd = "s3_bucket", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : protected_resource -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_protected_resource

[@@@deriving.end]

type actions__tagging = { status : string prop }
[@@deriving_inline yojson_of]

let _ = fun (_ : actions__tagging) -> ()

let yojson_of_actions__tagging =
  (function
   | { status = v_status } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_status in
         ("status", arg) :: bnds
       in
       `Assoc bnds
    : actions__tagging -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_actions__tagging

[@@@deriving.end]

type actions = {
  tagging : actions__tagging list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : actions) -> ()

let yojson_of_actions =
  (function
   | { tagging = v_tagging } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_tagging then bnds
         else
           let arg =
             (yojson_of_list yojson_of_actions__tagging) v_tagging
           in
           let bnd = "tagging", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : actions -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_actions

[@@@deriving.end]

type aws_guardduty_malware_protection_plan = {
  actions : actions list option; [@option]
  role : string prop;
  tags : (string * string prop) list option; [@option]
  protected_resource : protected_resource list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : aws_guardduty_malware_protection_plan) -> ()

let yojson_of_aws_guardduty_malware_protection_plan =
  (function
   | {
       actions = v_actions;
       role = v_role;
       tags = v_tags;
       protected_resource = v_protected_resource;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_protected_resource then bnds
         else
           let arg =
             (yojson_of_list yojson_of_protected_resource)
               v_protected_resource
           in
           let bnd = "protected_resource", arg in
           bnd :: bnds
       in
       let bnds =
         match v_tags with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               yojson_of_list
                 (function
                   | v0, v1 ->
                       let v0 = yojson_of_string v0
                       and v1 = yojson_of_prop yojson_of_string v1 in
                       `List [ v0; v1 ])
                 v
             in
             let bnd = "tags", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_role in
         ("role", arg) :: bnds
       in
       let bnds =
         match v_actions with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_list yojson_of_actions v in
             let bnd = "actions", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : aws_guardduty_malware_protection_plan ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_aws_guardduty_malware_protection_plan

[@@@deriving.end]

let protected_resource__s3_bucket ?object_prefixes ~bucket_name () :
    protected_resource__s3_bucket =
  { bucket_name; object_prefixes }

let protected_resource ?(s3_bucket = []) () : protected_resource =
  { s3_bucket }

let aws_guardduty_malware_protection_plan ?actions ?tags
    ?(protected_resource = []) ~role () :
    aws_guardduty_malware_protection_plan =
  { actions; role; tags; protected_resource }

type t = {
  tf_name : string;
  actions : actions list prop;
  arn : string prop;
  created_at : string prop;
  id : string prop;
  role : string prop;
  status : string prop;
  tags : (string * string) list prop;
  tags_all : (string * string) list prop;
}

let make ?actions ?tags ?(protected_resource = []) ~role __id =
  let __type = "aws_guardduty_malware_protection_plan" in
  let __attrs =
    ({
       tf_name = __id;
       actions = Prop.computed __type __id "actions";
       arn = Prop.computed __type __id "arn";
       created_at = Prop.computed __type __id "created_at";
       id = Prop.computed __type __id "id";
       role = Prop.computed __type __id "role";
       status = Prop.computed __type __id "status";
       tags = Prop.computed __type __id "tags";
       tags_all = Prop.computed __type __id "tags_all";
     }
      : t)
  in
  {
    Tf_core.id = __id;
    type_ = __type;
    json =
      yojson_of_aws_guardduty_malware_protection_plan
        (aws_guardduty_malware_protection_plan ?actions ?tags
           ~protected_resource ~role ());
    attrs = __attrs;
  }

let register ?tf_module ?actions ?tags ?(protected_resource = [])
    ~role __id =
  let (r : _ Tf_core.resource) =
    make ?actions ?tags ~protected_resource ~role __id
  in
  Resource.add ?tf_module ~type_:r.type_ ~id:r.id r.json;
  r.attrs
