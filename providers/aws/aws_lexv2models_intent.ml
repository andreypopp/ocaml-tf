(* DO NOT EDIT, GENERATED AUTOMATICALLY *)

open! Tf_core

type closing_setting__closing_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__closing_response__message_group__message__custom_payload) ->
  ()

let yojson_of_closing_setting__closing_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__closing_response__message_group__message__custom_payload

[@@@deriving.end]

type closing_setting__closing_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__closing_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_closing_setting__closing_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__closing_response__message_group__message__image_response_card__button

[@@@deriving.end]

type closing_setting__closing_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    closing_setting__closing_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__closing_response__message_group__message__image_response_card) ->
  ()

let yojson_of_closing_setting__closing_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__closing_response__message_group__message__image_response_card

[@@@deriving.end]

type closing_setting__closing_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__closing_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_closing_setting__closing_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__closing_response__message_group__message__plain_text_message

[@@@deriving.end]

type closing_setting__closing_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__closing_response__message_group__message__ssml_message) ->
  ()

let yojson_of_closing_setting__closing_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__closing_response__message_group__message__ssml_message

[@@@deriving.end]

type closing_setting__closing_response__message_group__message = {
  custom_payload :
    closing_setting__closing_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    closing_setting__closing_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    closing_setting__closing_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    closing_setting__closing_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : closing_setting__closing_response__message_group__message) ->
  ()

let yojson_of_closing_setting__closing_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__closing_response__message_group__message

[@@@deriving.end]

type closing_setting__closing_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__closing_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_closing_setting__closing_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__closing_response__message_group__variation__custom_payload

[@@@deriving.end]

type closing_setting__closing_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__closing_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_closing_setting__closing_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__closing_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type closing_setting__closing_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    closing_setting__closing_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__closing_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_closing_setting__closing_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__closing_response__message_group__variation__image_response_card

[@@@deriving.end]

type closing_setting__closing_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__closing_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_closing_setting__closing_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__closing_response__message_group__variation__plain_text_message

[@@@deriving.end]

type closing_setting__closing_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__closing_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_closing_setting__closing_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__closing_response__message_group__variation__ssml_message

[@@@deriving.end]

type closing_setting__closing_response__message_group__variation = {
  custom_payload :
    closing_setting__closing_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    closing_setting__closing_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    closing_setting__closing_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    closing_setting__closing_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__closing_response__message_group__variation) ->
  ()

let yojson_of_closing_setting__closing_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__closing_response__message_group__variation

[@@@deriving.end]

type closing_setting__closing_response__message_group = {
  message :
    closing_setting__closing_response__message_group__message list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    closing_setting__closing_response__message_group__variation list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : closing_setting__closing_response__message_group) -> ()

let yojson_of_closing_setting__closing_response__message_group =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_closing_setting__closing_response__message_group

[@@@deriving.end]

type closing_setting__closing_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    closing_setting__closing_response__message_group list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : closing_setting__closing_response) -> ()

let yojson_of_closing_setting__closing_response =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__closing_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_closing_setting__closing_response

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__condition) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__condition

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    closing_setting__conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    closing_setting__conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    closing_setting__conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    closing_setting__conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__next_step) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__next_step

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    closing_setting__conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    closing_setting__conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    closing_setting__conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    closing_setting__conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    closing_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    closing_setting__conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response__message_group = {
  message :
    closing_setting__conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    closing_setting__conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response__message_group

[@@@deriving.end]

type closing_setting__conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    closing_setting__conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : closing_setting__conditional__conditional_branch__response) ->
  ()

let yojson_of_closing_setting__conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__conditional_branch__response

[@@@deriving.end]

type closing_setting__conditional__conditional_branch = {
  name : string prop;
  condition :
    closing_setting__conditional__conditional_branch__condition list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    closing_setting__conditional__conditional_branch__next_step list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    closing_setting__conditional__conditional_branch__response list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : closing_setting__conditional__conditional_branch) -> ()

let yojson_of_closing_setting__conditional__conditional_branch =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_closing_setting__conditional__conditional_branch

[@@@deriving.end]

type closing_setting__conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type closing_setting__conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type closing_setting__conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    closing_setting__conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type closing_setting__conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    closing_setting__conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__next_step__intent

[@@@deriving.end]

type closing_setting__conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    closing_setting__conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    closing_setting__conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : closing_setting__conditional__default_branch__next_step) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__next_step

[@@@deriving.end]

type closing_setting__conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type closing_setting__conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type closing_setting__conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    closing_setting__conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type closing_setting__conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type closing_setting__conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type closing_setting__conditional__default_branch__response__message_group__message = {
  custom_payload :
    closing_setting__conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    closing_setting__conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    closing_setting__conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    closing_setting__conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response__message_group__message

[@@@deriving.end]

type closing_setting__conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type closing_setting__conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type closing_setting__conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    closing_setting__conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type closing_setting__conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type closing_setting__conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type closing_setting__conditional__default_branch__response__message_group__variation = {
  custom_payload :
    closing_setting__conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    closing_setting__conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    closing_setting__conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    closing_setting__conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type closing_setting__conditional__default_branch__response__message_group = {
  message :
    closing_setting__conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    closing_setting__conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       closing_setting__conditional__default_branch__response__message_group) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response__message_group

[@@@deriving.end]

type closing_setting__conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    closing_setting__conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : closing_setting__conditional__default_branch__response) ->
  ()

let yojson_of_closing_setting__conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_closing_setting__conditional__default_branch__response

[@@@deriving.end]

type closing_setting__conditional__default_branch = {
  next_step :
    closing_setting__conditional__default_branch__next_step list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    closing_setting__conditional__default_branch__response list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : closing_setting__conditional__default_branch) -> ()

let yojson_of_closing_setting__conditional__default_branch =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_closing_setting__conditional__default_branch

[@@@deriving.end]

type closing_setting__conditional = {
  active : bool prop;
  conditional_branch :
    closing_setting__conditional__conditional_branch list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch : closing_setting__conditional__default_branch list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : closing_setting__conditional) -> ()

let yojson_of_closing_setting__conditional =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_closing_setting__conditional

[@@@deriving.end]

type closing_setting__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : closing_setting__next_step__dialog_action) -> ()

let yojson_of_closing_setting__next_step__dialog_action =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_closing_setting__next_step__dialog_action

[@@@deriving.end]

type closing_setting__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : closing_setting__next_step__intent__slot__value) -> ()

let yojson_of_closing_setting__next_step__intent__slot__value =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_closing_setting__next_step__intent__slot__value

[@@@deriving.end]

type closing_setting__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value : closing_setting__next_step__intent__slot__value list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : closing_setting__next_step__intent__slot) -> ()

let yojson_of_closing_setting__next_step__intent__slot =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : closing_setting__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_closing_setting__next_step__intent__slot

[@@@deriving.end]

type closing_setting__next_step__intent = {
  name : string prop option; [@option]
  slot : closing_setting__next_step__intent__slot list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : closing_setting__next_step__intent) -> ()

let yojson_of_closing_setting__next_step__intent =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_closing_setting__next_step__intent

[@@@deriving.end]

type closing_setting__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action : closing_setting__next_step__dialog_action list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent : closing_setting__next_step__intent list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : closing_setting__next_step) -> ()

let yojson_of_closing_setting__next_step =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting__next_step -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_closing_setting__next_step

[@@@deriving.end]

type closing_setting = {
  active : bool prop option; [@option]
  closing_response : closing_setting__closing_response list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  conditional : closing_setting__conditional list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step : closing_setting__next_step list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : closing_setting) -> ()

let yojson_of_closing_setting =
  (function
   | {
       active = v_active;
       closing_response = v_closing_response;
       conditional = v_conditional;
       next_step = v_next_step;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list yojson_of_closing_setting__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional then bnds
         else
           let arg =
             (yojson_of_list yojson_of_closing_setting__conditional)
               v_conditional
           in
           let bnd = "conditional", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_closing_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_closing_setting__closing_response)
               v_closing_response
           in
           let bnd = "closing_response", arg in
           bnd :: bnds
       in
       let bnds =
         match v_active with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "active", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : closing_setting -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_closing_setting

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group = {
  message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch = {
  name : string prop;
  condition :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch
    =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group = {
  message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch = {
  next_step :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch
    =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_conditional = {
  active : bool prop;
  conditional_branch :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_conditional) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional
    =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_next_step) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group = {
  message :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__failure_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__failure_response) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__failure_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group = {
  message :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch = {
  name : string prop;
  condition :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch
    =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group = {
  message :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch = {
  next_step :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch
    =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_conditional = {
  active : bool prop;
  conditional_branch :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_conditional) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional
    =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_next_step) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group = {
  message :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__success_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__success_response) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__success_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group = {
  message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch = {
  name : string prop;
  condition :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch
    =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group = {
  message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch = {
  next_step :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch
    =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional = {
  active : bool prop;
  conditional_branch :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional
    =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation = {
  custom_payload :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group = {
  message :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification__timeout_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification__timeout_response) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification__timeout_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response

[@@@deriving.end]

type confirmation_setting__code_hook__post_code_hook_specification = {
  failure_conditional :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  failure_next_step :
    confirmation_setting__code_hook__post_code_hook_specification__failure_next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  failure_response :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  success_conditional :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  success_next_step :
    confirmation_setting__code_hook__post_code_hook_specification__success_next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  success_response :
    confirmation_setting__code_hook__post_code_hook_specification__success_response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  timeout_conditional :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  timeout_next_step :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  timeout_response :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__code_hook__post_code_hook_specification) ->
  ()

let yojson_of_confirmation_setting__code_hook__post_code_hook_specification
    =
  (function
   | {
       failure_conditional = v_failure_conditional;
       failure_next_step = v_failure_next_step;
       failure_response = v_failure_response;
       success_conditional = v_success_conditional;
       success_next_step = v_success_next_step;
       success_response = v_success_response;
       timeout_conditional = v_timeout_conditional;
       timeout_next_step = v_timeout_next_step;
       timeout_response = v_timeout_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_timeout_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_response)
               v_timeout_response
           in
           let bnd = "timeout_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_timeout_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step)
               v_timeout_next_step
           in
           let bnd = "timeout_next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_timeout_conditional then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional)
               v_timeout_conditional
           in
           let bnd = "timeout_conditional", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_success_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_response)
               v_success_response
           in
           let bnd = "success_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_success_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_next_step)
               v_success_next_step
           in
           let bnd = "success_next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_success_conditional then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__success_conditional)
               v_success_conditional
           in
           let bnd = "success_conditional", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_failure_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_response)
               v_failure_response
           in
           let bnd = "failure_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_failure_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_next_step)
               v_failure_next_step
           in
           let bnd = "failure_next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_failure_conditional then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification__failure_conditional)
               v_failure_conditional
           in
           let bnd = "failure_conditional", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook__post_code_hook_specification ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__code_hook__post_code_hook_specification

[@@@deriving.end]

type confirmation_setting__code_hook = {
  active : bool prop;
  enable_code_hook_invocation : bool prop;
  invocation_label : string prop option; [@option]
  post_code_hook_specification :
    confirmation_setting__code_hook__post_code_hook_specification
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : confirmation_setting__code_hook) -> ()

let yojson_of_confirmation_setting__code_hook =
  (function
   | {
       active = v_active;
       enable_code_hook_invocation = v_enable_code_hook_invocation;
       invocation_label = v_invocation_label;
       post_code_hook_specification = v_post_code_hook_specification;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_post_code_hook_specification then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook__post_code_hook_specification)
               v_post_code_hook_specification
           in
           let bnd = "post_code_hook_specification", arg in
           bnd :: bnds
       in
       let bnds =
         match v_invocation_label with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "invocation_label", arg in
             bnd :: bnds
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_bool
             v_enable_code_hook_invocation
         in
         ("enable_code_hook_invocation", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__code_hook ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__code_hook

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__condition) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__condition

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__confirmation_conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__next_step) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response__message_group = {
  message :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch__response) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__conditional_branch = {
  name : string prop;
  condition :
    confirmation_setting__confirmation_conditional__conditional_branch__condition
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    confirmation_setting__confirmation_conditional__conditional_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    confirmation_setting__confirmation_conditional__conditional_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__conditional_branch) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__conditional_branch
    =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__conditional_branch

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step__intent

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__confirmation_conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__confirmation_conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__next_step) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response__message_group__message = {
  custom_payload :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation = {
  custom_payload :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response__message_group = {
  message :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response__message_group) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch__response) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch__response

[@@@deriving.end]

type confirmation_setting__confirmation_conditional__default_branch = {
  next_step :
    confirmation_setting__confirmation_conditional__default_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    confirmation_setting__confirmation_conditional__default_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_conditional__default_branch) ->
  ()

let yojson_of_confirmation_setting__confirmation_conditional__default_branch
    =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_conditional__default_branch

[@@@deriving.end]

type confirmation_setting__confirmation_conditional = {
  active : bool prop;
  conditional_branch :
    confirmation_setting__confirmation_conditional__conditional_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch :
    confirmation_setting__confirmation_conditional__default_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__confirmation_conditional) -> ()

let yojson_of_confirmation_setting__confirmation_conditional =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__confirmation_conditional

[@@@deriving.end]

type confirmation_setting__confirmation_next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__confirmation_next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__confirmation_next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__confirmation_next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__confirmation_next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__confirmation_next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__confirmation_next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__confirmation_next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__confirmation_next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__confirmation_next_step__intent__slot list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__confirmation_next_step__intent) -> ()

let yojson_of_confirmation_setting__confirmation_next_step__intent =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_next_step__intent

[@@@deriving.end]

type confirmation_setting__confirmation_next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__confirmation_next_step__dialog_action list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent : confirmation_setting__confirmation_next_step__intent list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : confirmation_setting__confirmation_next_step) -> ()

let yojson_of_confirmation_setting__confirmation_next_step =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__confirmation_next_step

[@@@deriving.end]

type confirmation_setting__confirmation_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__confirmation_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__confirmation_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__confirmation_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__confirmation_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__confirmation_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__confirmation_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__confirmation_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__confirmation_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__confirmation_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__confirmation_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__confirmation_response__message_group__message = {
  custom_payload :
    confirmation_setting__confirmation_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__confirmation_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__confirmation_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__confirmation_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__confirmation_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_response__message_group__message

[@@@deriving.end]

type confirmation_setting__confirmation_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__confirmation_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__confirmation_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__confirmation_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__confirmation_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__confirmation_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__confirmation_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__confirmation_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__confirmation_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__confirmation_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__confirmation_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__confirmation_response__message_group__variation = {
  custom_payload :
    confirmation_setting__confirmation_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__confirmation_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__confirmation_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__confirmation_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__confirmation_response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__confirmation_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_response__message_group__variation

[@@@deriving.end]

type confirmation_setting__confirmation_response__message_group = {
  message :
    confirmation_setting__confirmation_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__confirmation_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__confirmation_response__message_group) ->
  ()

let yojson_of_confirmation_setting__confirmation_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__confirmation_response__message_group

[@@@deriving.end]

type confirmation_setting__confirmation_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__confirmation_response__message_group list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : confirmation_setting__confirmation_response) -> ()

let yojson_of_confirmation_setting__confirmation_response =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__confirmation_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__confirmation_response

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__condition) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__condition

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__declination_conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__declination_conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__next_step) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response__message_group = {
  message :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch__response) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch__response

[@@@deriving.end]

type confirmation_setting__declination_conditional__conditional_branch = {
  name : string prop;
  condition :
    confirmation_setting__declination_conditional__conditional_branch__condition
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    confirmation_setting__declination_conditional__conditional_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    confirmation_setting__declination_conditional__conditional_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__conditional_branch) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__conditional_branch
    =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__conditional_branch

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__declination_conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__declination_conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__next_step__intent

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__declination_conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__declination_conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__next_step) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__next_step

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response__message_group__message = {
  custom_payload :
    confirmation_setting__declination_conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__declination_conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__declination_conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response__message_group__variation = {
  custom_payload :
    confirmation_setting__declination_conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__declination_conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__declination_conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response__message_group = {
  message :
    confirmation_setting__declination_conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__declination_conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response__message_group) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__declination_conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch__response) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch__response

[@@@deriving.end]

type confirmation_setting__declination_conditional__default_branch = {
  next_step :
    confirmation_setting__declination_conditional__default_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    confirmation_setting__declination_conditional__default_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_conditional__default_branch) ->
  ()

let yojson_of_confirmation_setting__declination_conditional__default_branch
    =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_conditional__default_branch

[@@@deriving.end]

type confirmation_setting__declination_conditional = {
  active : bool prop;
  conditional_branch :
    confirmation_setting__declination_conditional__conditional_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch :
    confirmation_setting__declination_conditional__default_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : confirmation_setting__declination_conditional) -> ()

let yojson_of_confirmation_setting__declination_conditional =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__declination_conditional

[@@@deriving.end]

type confirmation_setting__declination_next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__declination_next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__declination_next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__declination_next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__declination_next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__declination_next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__declination_next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__declination_next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__declination_next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__declination_next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__declination_next_step__intent__slot list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__declination_next_step__intent) -> ()

let yojson_of_confirmation_setting__declination_next_step__intent =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__declination_next_step__intent

[@@@deriving.end]

type confirmation_setting__declination_next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__declination_next_step__dialog_action list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent : confirmation_setting__declination_next_step__intent list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : confirmation_setting__declination_next_step) -> ()

let yojson_of_confirmation_setting__declination_next_step =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__declination_next_step

[@@@deriving.end]

type confirmation_setting__declination_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__declination_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__declination_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__declination_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__declination_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__declination_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__declination_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__declination_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__declination_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__declination_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__declination_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__declination_response__message_group__message = {
  custom_payload :
    confirmation_setting__declination_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__declination_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__declination_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__declination_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__declination_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_response__message_group__message

[@@@deriving.end]

type confirmation_setting__declination_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__declination_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__declination_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__declination_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__declination_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__declination_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__declination_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__declination_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__declination_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__declination_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__declination_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__declination_response__message_group__variation = {
  custom_payload :
    confirmation_setting__declination_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__declination_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__declination_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__declination_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__declination_response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__declination_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_response__message_group__variation

[@@@deriving.end]

type confirmation_setting__declination_response__message_group = {
  message :
    confirmation_setting__declination_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__declination_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__declination_response__message_group) ->
  ()

let yojson_of_confirmation_setting__declination_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__declination_response__message_group

[@@@deriving.end]

type confirmation_setting__declination_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__declination_response__message_group list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : confirmation_setting__declination_response) -> ()

let yojson_of_confirmation_setting__declination_response =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__declination_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__declination_response

[@@@deriving.end]

type confirmation_setting__elicitation_code_hook = {
  enable_code_hook_invocation : bool prop option; [@option]
  invocation_label : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : confirmation_setting__elicitation_code_hook) -> ()

let yojson_of_confirmation_setting__elicitation_code_hook =
  (function
   | {
       enable_code_hook_invocation = v_enable_code_hook_invocation;
       invocation_label = v_invocation_label;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_invocation_label with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "invocation_label", arg in
             bnd :: bnds
       in
       let bnds =
         match v_enable_code_hook_invocation with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "enable_code_hook_invocation", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__elicitation_code_hook ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__elicitation_code_hook

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__condition) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__condition

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__failure_conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__failure_conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__next_step) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response__message_group = {
  message :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch__response) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch__response

[@@@deriving.end]

type confirmation_setting__failure_conditional__conditional_branch = {
  name : string prop;
  condition :
    confirmation_setting__failure_conditional__conditional_branch__condition
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    confirmation_setting__failure_conditional__conditional_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    confirmation_setting__failure_conditional__conditional_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__conditional_branch) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__conditional_branch
    =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__conditional_branch

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__failure_conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    confirmation_setting__failure_conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__next_step__intent

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__failure_conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    confirmation_setting__failure_conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__next_step) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__next_step

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response__message_group__message = {
  custom_payload :
    confirmation_setting__failure_conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__failure_conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__failure_conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response__message_group__variation = {
  custom_payload :
    confirmation_setting__failure_conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__failure_conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response__message_group = {
  message :
    confirmation_setting__failure_conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__failure_conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response__message_group) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__failure_conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_conditional__default_branch__response) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch__response

[@@@deriving.end]

type confirmation_setting__failure_conditional__default_branch = {
  next_step :
    confirmation_setting__failure_conditional__default_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    confirmation_setting__failure_conditional__default_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__failure_conditional__default_branch) ->
  ()

let yojson_of_confirmation_setting__failure_conditional__default_branch
    =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_conditional__default_branch

[@@@deriving.end]

type confirmation_setting__failure_conditional = {
  active : bool prop;
  conditional_branch :
    confirmation_setting__failure_conditional__conditional_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch :
    confirmation_setting__failure_conditional__default_branch list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : confirmation_setting__failure_conditional) -> ()

let yojson_of_confirmation_setting__failure_conditional =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__failure_conditional

[@@@deriving.end]

type confirmation_setting__failure_next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__failure_next_step__dialog_action) ->
  ()

let yojson_of_confirmation_setting__failure_next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_next_step__dialog_action

[@@@deriving.end]

type confirmation_setting__failure_next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_next_step__intent__slot__value) ->
  ()

let yojson_of_confirmation_setting__failure_next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_next_step__intent__slot__value

[@@@deriving.end]

type confirmation_setting__failure_next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    confirmation_setting__failure_next_step__intent__slot__value list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__failure_next_step__intent__slot) ->
  ()

let yojson_of_confirmation_setting__failure_next_step__intent__slot =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_next_step__intent__slot

[@@@deriving.end]

type confirmation_setting__failure_next_step__intent = {
  name : string prop option; [@option]
  slot : confirmation_setting__failure_next_step__intent__slot list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__failure_next_step__intent) -> ()

let yojson_of_confirmation_setting__failure_next_step__intent =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__failure_next_step__intent

[@@@deriving.end]

type confirmation_setting__failure_next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    confirmation_setting__failure_next_step__dialog_action list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent : confirmation_setting__failure_next_step__intent list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : confirmation_setting__failure_next_step) -> ()

let yojson_of_confirmation_setting__failure_next_step =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__failure_next_step

[@@@deriving.end]

type confirmation_setting__failure_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_response__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__failure_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_response__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__failure_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__failure_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_response__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__failure_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__failure_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_response__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__failure_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_response__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__failure_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__failure_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_response__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__failure_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_response__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__failure_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_response__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__failure_response__message_group__message = {
  custom_payload :
    confirmation_setting__failure_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__failure_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__failure_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__failure_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_response__message_group__message) ->
  ()

let yojson_of_confirmation_setting__failure_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_response__message_group__message

[@@@deriving.end]

type confirmation_setting__failure_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__failure_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_response__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__failure_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__failure_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__failure_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__failure_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__failure_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_response__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__failure_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__failure_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_response__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__failure_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__failure_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_response__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__failure_response__message_group__variation = {
  custom_payload :
    confirmation_setting__failure_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__failure_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__failure_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__failure_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__failure_response__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__failure_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_response__message_group__variation

[@@@deriving.end]

type confirmation_setting__failure_response__message_group = {
  message :
    confirmation_setting__failure_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__failure_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__failure_response__message_group) ->
  ()

let yojson_of_confirmation_setting__failure_response__message_group =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__failure_response__message_group

[@@@deriving.end]

type confirmation_setting__failure_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    confirmation_setting__failure_response__message_group list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : confirmation_setting__failure_response) -> ()

let yojson_of_confirmation_setting__failure_response =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__failure_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__failure_response

[@@@deriving.end]

type confirmation_setting__prompt_specification__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__message_group__message__custom_payload) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__message_group__message__custom_payload

[@@@deriving.end]

type confirmation_setting__prompt_specification__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__message_group__message__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__message_group__message__image_response_card__button

[@@@deriving.end]

type confirmation_setting__prompt_specification__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__prompt_specification__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__message_group__message__image_response_card) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__message_group__message__image_response_card

[@@@deriving.end]

type confirmation_setting__prompt_specification__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__message_group__message__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__message_group__message__plain_text_message

[@@@deriving.end]

type confirmation_setting__prompt_specification__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__message_group__message__ssml_message) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__message_group__message__ssml_message

[@@@deriving.end]

type confirmation_setting__prompt_specification__message_group__message = {
  custom_payload :
    confirmation_setting__prompt_specification__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__prompt_specification__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__prompt_specification__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__prompt_specification__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__message_group__message) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__message_group__message

[@@@deriving.end]

type confirmation_setting__prompt_specification__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__message_group__variation__custom_payload) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__message_group__variation__custom_payload

[@@@deriving.end]

type confirmation_setting__prompt_specification__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__message_group__variation__image_response_card__button

[@@@deriving.end]

type confirmation_setting__prompt_specification__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    confirmation_setting__prompt_specification__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__message_group__variation__image_response_card) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__message_group__variation__image_response_card

[@@@deriving.end]

type confirmation_setting__prompt_specification__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__message_group__variation__plain_text_message) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__message_group__variation__plain_text_message

[@@@deriving.end]

type confirmation_setting__prompt_specification__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__message_group__variation__ssml_message) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__message_group__variation__ssml_message

[@@@deriving.end]

type confirmation_setting__prompt_specification__message_group__variation = {
  custom_payload :
    confirmation_setting__prompt_specification__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    confirmation_setting__prompt_specification__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    confirmation_setting__prompt_specification__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    confirmation_setting__prompt_specification__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__message_group__variation) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__message_group__variation

[@@@deriving.end]

type confirmation_setting__prompt_specification__message_group = {
  message :
    confirmation_setting__prompt_specification__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    confirmation_setting__prompt_specification__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : confirmation_setting__prompt_specification__message_group) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__message_group

[@@@deriving.end]

type confirmation_setting__prompt_specification__prompt_attempts_specification__allowed_input_types = {
  allow_audio_input : bool prop;
  allow_dtmf_input : bool prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__prompt_attempts_specification__allowed_input_types) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__allowed_input_types
    =
  (function
   | {
       allow_audio_input = v_allow_audio_input;
       allow_dtmf_input = v_allow_dtmf_input;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_bool v_allow_dtmf_input
         in
         ("allow_dtmf_input", arg) :: bnds
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_bool v_allow_audio_input
         in
         ("allow_audio_input", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__prompt_attempts_specification__allowed_input_types ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__allowed_input_types

[@@@deriving.end]

type confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__audio_specification = {
  end_timeout_ms : float prop;
  max_length_ms : float prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__audio_specification) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__audio_specification
    =
  (function
   | {
       end_timeout_ms = v_end_timeout_ms;
       max_length_ms = v_max_length_ms;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_float v_max_length_ms in
         ("max_length_ms", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_float v_end_timeout_ms in
         ("end_timeout_ms", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__audio_specification ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__audio_specification

[@@@deriving.end]

type confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__dtmf_specification = {
  deletion_character : string prop;
  end_character : string prop;
  end_timeout_ms : float prop;
  max_length : float prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__dtmf_specification) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__dtmf_specification
    =
  (function
   | {
       deletion_character = v_deletion_character;
       end_character = v_end_character;
       end_timeout_ms = v_end_timeout_ms;
       max_length = v_max_length;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_float v_max_length in
         ("max_length", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_float v_end_timeout_ms in
         ("end_timeout_ms", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_end_character in
         ("end_character", arg) :: bnds
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_deletion_character
         in
         ("deletion_character", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__dtmf_specification ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__dtmf_specification

[@@@deriving.end]

type confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification = {
  start_timeout_ms : float prop;
  audio_specification :
    confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__audio_specification
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  dtmf_specification :
    confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__dtmf_specification
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification
    =
  (function
   | {
       start_timeout_ms = v_start_timeout_ms;
       audio_specification = v_audio_specification;
       dtmf_specification = v_dtmf_specification;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_dtmf_specification then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__dtmf_specification)
               v_dtmf_specification
           in
           let bnd = "dtmf_specification", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_audio_specification then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__audio_specification)
               v_audio_specification
           in
           let bnd = "audio_specification", arg in
           bnd :: bnds
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_float v_start_timeout_ms
         in
         ("start_timeout_ms", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification

[@@@deriving.end]

type confirmation_setting__prompt_specification__prompt_attempts_specification__text_input_specification = {
  start_timeout_ms : float prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__prompt_attempts_specification__text_input_specification) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__text_input_specification
    =
  (function
   | { start_timeout_ms = v_start_timeout_ms } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_float v_start_timeout_ms
         in
         ("start_timeout_ms", arg) :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__prompt_attempts_specification__text_input_specification ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__text_input_specification

[@@@deriving.end]

type confirmation_setting__prompt_specification__prompt_attempts_specification = {
  allow_interrupt : bool prop option; [@option]
  map_block_key : string prop;
  allowed_input_types :
    confirmation_setting__prompt_specification__prompt_attempts_specification__allowed_input_types
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  audio_and_dtmf_input_specification :
    confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  text_input_specification :
    confirmation_setting__prompt_specification__prompt_attempts_specification__text_input_specification
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       confirmation_setting__prompt_specification__prompt_attempts_specification) ->
  ()

let yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       map_block_key = v_map_block_key;
       allowed_input_types = v_allowed_input_types;
       audio_and_dtmf_input_specification =
         v_audio_and_dtmf_input_specification;
       text_input_specification = v_text_input_specification;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_text_input_specification then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__text_input_specification)
               v_text_input_specification
           in
           let bnd = "text_input_specification", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_audio_and_dtmf_input_specification then
           bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification)
               v_audio_and_dtmf_input_specification
           in
           let bnd = "audio_and_dtmf_input_specification", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_allowed_input_types then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification__allowed_input_types)
               v_allowed_input_types
           in
           let bnd = "allowed_input_types", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification__prompt_attempts_specification ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification

[@@@deriving.end]

type confirmation_setting__prompt_specification = {
  allow_interrupt : bool prop option; [@option]
  max_retries : float prop;
  message_selection_strategy : string prop option; [@option]
  message_group :
    confirmation_setting__prompt_specification__message_group list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  prompt_attempts_specification :
    confirmation_setting__prompt_specification__prompt_attempts_specification
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : confirmation_setting__prompt_specification) -> ()

let yojson_of_confirmation_setting__prompt_specification =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       max_retries = v_max_retries;
       message_selection_strategy = v_message_selection_strategy;
       message_group = v_message_group;
       prompt_attempts_specification =
         v_prompt_attempts_specification;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_prompt_attempts_specification then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__prompt_attempts_specification)
               v_prompt_attempts_specification
           in
           let bnd = "prompt_attempts_specification", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_message_selection_strategy with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "message_selection_strategy", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_float v_max_retries in
         ("max_retries", arg) :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting__prompt_specification ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting__prompt_specification

[@@@deriving.end]

type confirmation_setting = {
  active : bool prop option; [@option]
  code_hook : confirmation_setting__code_hook list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  confirmation_conditional :
    confirmation_setting__confirmation_conditional list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  confirmation_next_step :
    confirmation_setting__confirmation_next_step list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  confirmation_response :
    confirmation_setting__confirmation_response list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  declination_conditional :
    confirmation_setting__declination_conditional list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  declination_next_step :
    confirmation_setting__declination_next_step list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  declination_response :
    confirmation_setting__declination_response list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  elicitation_code_hook :
    confirmation_setting__elicitation_code_hook list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  failure_conditional :
    confirmation_setting__failure_conditional list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  failure_next_step : confirmation_setting__failure_next_step list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  failure_response : confirmation_setting__failure_response list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  prompt_specification :
    confirmation_setting__prompt_specification list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : confirmation_setting) -> ()

let yojson_of_confirmation_setting =
  (function
   | {
       active = v_active;
       code_hook = v_code_hook;
       confirmation_conditional = v_confirmation_conditional;
       confirmation_next_step = v_confirmation_next_step;
       confirmation_response = v_confirmation_response;
       declination_conditional = v_declination_conditional;
       declination_next_step = v_declination_next_step;
       declination_response = v_declination_response;
       elicitation_code_hook = v_elicitation_code_hook;
       failure_conditional = v_failure_conditional;
       failure_next_step = v_failure_next_step;
       failure_response = v_failure_response;
       prompt_specification = v_prompt_specification;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_prompt_specification then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__prompt_specification)
               v_prompt_specification
           in
           let bnd = "prompt_specification", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_failure_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_response)
               v_failure_response
           in
           let bnd = "failure_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_failure_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_next_step)
               v_failure_next_step
           in
           let bnd = "failure_next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_failure_conditional then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__failure_conditional)
               v_failure_conditional
           in
           let bnd = "failure_conditional", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_elicitation_code_hook then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__elicitation_code_hook)
               v_elicitation_code_hook
           in
           let bnd = "elicitation_code_hook", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_declination_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_response)
               v_declination_response
           in
           let bnd = "declination_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_declination_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_next_step)
               v_declination_next_step
           in
           let bnd = "declination_next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_declination_conditional then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__declination_conditional)
               v_declination_conditional
           in
           let bnd = "declination_conditional", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_confirmation_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_response)
               v_confirmation_response
           in
           let bnd = "confirmation_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_confirmation_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_next_step)
               v_confirmation_next_step
           in
           let bnd = "confirmation_next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_confirmation_conditional then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__confirmation_conditional)
               v_confirmation_conditional
           in
           let bnd = "confirmation_conditional", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_code_hook then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_confirmation_setting__code_hook)
               v_code_hook
           in
           let bnd = "code_hook", arg in
           bnd :: bnds
       in
       let bnds =
         match v_active with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "active", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : confirmation_setting -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_confirmation_setting

[@@@deriving.end]

type dialog_code_hook = { enabled : bool prop }
[@@deriving_inline yojson_of]

let _ = fun (_ : dialog_code_hook) -> ()

let yojson_of_dialog_code_hook =
  (function
   | { enabled = v_enabled } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_enabled in
         ("enabled", arg) :: bnds
       in
       `Assoc bnds
    : dialog_code_hook -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_dialog_code_hook

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message = {
  custom_payload :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation = {
  custom_payload :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group = {
  message :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__start_response = {
  allow_interrupt : bool prop option; [@option]
  delay_in_seconds : float prop option; [@option]
  message_group :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__start_response) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       delay_in_seconds = v_delay_in_seconds;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_delay_in_seconds with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_float v in
             let bnd = "delay_in_seconds", arg in
             bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__start_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message = {
  custom_payload :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation = {
  custom_payload :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group = {
  message :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification__update_response = {
  allow_interrupt : bool prop option; [@option]
  frequency_in_seconds : float prop;
  message_group :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__fulfillment_updates_specification__update_response) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       frequency_in_seconds = v_frequency_in_seconds;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_float v_frequency_in_seconds
         in
         ("frequency_in_seconds", arg) :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification__update_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response

[@@@deriving.end]

type fulfillment_code_hook__fulfillment_updates_specification = {
  active : bool prop;
  timeout_in_seconds : float prop option; [@option]
  start_response :
    fulfillment_code_hook__fulfillment_updates_specification__start_response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  update_response :
    fulfillment_code_hook__fulfillment_updates_specification__update_response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : fulfillment_code_hook__fulfillment_updates_specification) ->
  ()

let yojson_of_fulfillment_code_hook__fulfillment_updates_specification
    =
  (function
   | {
       active = v_active;
       timeout_in_seconds = v_timeout_in_seconds;
       start_response = v_start_response;
       update_response = v_update_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_update_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__update_response)
               v_update_response
           in
           let bnd = "update_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_start_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification__start_response)
               v_start_response
           in
           let bnd = "start_response", arg in
           bnd :: bnds
       in
       let bnds =
         match v_timeout_in_seconds with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_float v in
             let bnd = "timeout_in_seconds", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__fulfillment_updates_specification ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__fulfillment_updates_specification

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__condition) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__condition

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group = {
  message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch = {
  name : string prop;
  condition :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__condition
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch
    =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group = {
  message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch = {
  next_step :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch
    =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional = {
  active : bool prop;
  conditional_branch :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional
    =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__dialog_action) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__dialog_action

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot__value) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot__value

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent = {
  name : string prop option; [@option]
  slot :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group = {
  message :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__failure_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__failure_response) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__failure_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__condition) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__condition

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group = {
  message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch = {
  name : string prop;
  condition :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__condition
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch
    =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group = {
  message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch = {
  next_step :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch
    =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_conditional = {
  active : bool prop;
  conditional_branch :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_conditional) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional
    =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__dialog_action) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__dialog_action

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot__value) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot__value

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent = {
  name : string prop option; [@option]
  slot :
    fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_next_step) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group = {
  message :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__success_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__success_response) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__success_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__condition) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__condition

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group = {
  message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch = {
  name : string prop;
  condition :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__condition
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch
    =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group = {
  message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch = {
  next_step :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch
    =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional = {
  active : bool prop;
  conditional_branch :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional
    =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__dialog_action) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__dialog_action

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot__value) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot__value

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent = {
  name : string prop option; [@option]
  slot :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__custom_payload

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__plain_text_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__ssml_message

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation = {
  custom_payload :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group = {
  message :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification__timeout_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification__timeout_response) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification__timeout_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response

[@@@deriving.end]

type fulfillment_code_hook__post_fulfillment_status_specification = {
  failure_conditional :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  failure_next_step :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  failure_response :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  success_conditional :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  success_next_step :
    fulfillment_code_hook__post_fulfillment_status_specification__success_next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  success_response :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  timeout_conditional :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  timeout_next_step :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  timeout_response :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       fulfillment_code_hook__post_fulfillment_status_specification) ->
  ()

let yojson_of_fulfillment_code_hook__post_fulfillment_status_specification
    =
  (function
   | {
       failure_conditional = v_failure_conditional;
       failure_next_step = v_failure_next_step;
       failure_response = v_failure_response;
       success_conditional = v_success_conditional;
       success_next_step = v_success_next_step;
       success_response = v_success_response;
       timeout_conditional = v_timeout_conditional;
       timeout_next_step = v_timeout_next_step;
       timeout_response = v_timeout_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_timeout_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_response)
               v_timeout_response
           in
           let bnd = "timeout_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_timeout_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step)
               v_timeout_next_step
           in
           let bnd = "timeout_next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_timeout_conditional then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional)
               v_timeout_conditional
           in
           let bnd = "timeout_conditional", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_success_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_response)
               v_success_response
           in
           let bnd = "success_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_success_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_next_step)
               v_success_next_step
           in
           let bnd = "success_next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_success_conditional then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__success_conditional)
               v_success_conditional
           in
           let bnd = "success_conditional", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_failure_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_response)
               v_failure_response
           in
           let bnd = "failure_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_failure_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step)
               v_failure_next_step
           in
           let bnd = "failure_next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_failure_conditional then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional)
               v_failure_conditional
           in
           let bnd = "failure_conditional", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook__post_fulfillment_status_specification ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_fulfillment_code_hook__post_fulfillment_status_specification

[@@@deriving.end]

type fulfillment_code_hook = {
  active : bool prop option; [@option]
  enabled : bool prop;
  fulfillment_updates_specification :
    fulfillment_code_hook__fulfillment_updates_specification list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  post_fulfillment_status_specification :
    fulfillment_code_hook__post_fulfillment_status_specification list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : fulfillment_code_hook) -> ()

let yojson_of_fulfillment_code_hook =
  (function
   | {
       active = v_active;
       enabled = v_enabled;
       fulfillment_updates_specification =
         v_fulfillment_updates_specification;
       post_fulfillment_status_specification =
         v_post_fulfillment_status_specification;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_post_fulfillment_status_specification
         then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__post_fulfillment_status_specification)
               v_post_fulfillment_status_specification
           in
           let bnd = "post_fulfillment_status_specification", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_fulfillment_updates_specification then
           bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_fulfillment_code_hook__fulfillment_updates_specification)
               v_fulfillment_updates_specification
           in
           let bnd = "fulfillment_updates_specification", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_enabled in
         ("enabled", arg) :: bnds
       in
       let bnds =
         match v_active with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "active", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : fulfillment_code_hook -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_fulfillment_code_hook

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group = {
  message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch = {
  name : string prop;
  condition :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch
    =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group = {
  message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch = {
  next_step :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch
    =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_conditional = {
  active : bool prop;
  conditional_branch :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_conditional) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional
    =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent = {
  name : string prop option; [@option]
  slot :
    initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_next_step) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group = {
  message :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__failure_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__failure_response) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__failure_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group = {
  message :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch = {
  name : string prop;
  condition :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch
    =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group = {
  message :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch = {
  next_step :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch
    =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_conditional = {
  active : bool prop;
  conditional_branch :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_conditional) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional
    =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent = {
  name : string prop option; [@option]
  slot :
    initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    initial_response_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_next_step) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group = {
  message :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__success_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__success_response) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__success_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group = {
  message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch = {
  name : string prop;
  condition :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch
    =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group = {
  message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch = {
  next_step :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch
    =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional = {
  active : bool prop;
  conditional_branch :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional
    =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent = {
  name : string prop option; [@option]
  slot :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation = {
  custom_payload :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group = {
  message :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification__timeout_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification__timeout_response) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification__timeout_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response

[@@@deriving.end]

type initial_response_setting__code_hook__post_code_hook_specification = {
  failure_conditional :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  failure_next_step :
    initial_response_setting__code_hook__post_code_hook_specification__failure_next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  failure_response :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  success_conditional :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  success_next_step :
    initial_response_setting__code_hook__post_code_hook_specification__success_next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  success_response :
    initial_response_setting__code_hook__post_code_hook_specification__success_response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  timeout_conditional :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  timeout_next_step :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  timeout_response :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__code_hook__post_code_hook_specification) ->
  ()

let yojson_of_initial_response_setting__code_hook__post_code_hook_specification
    =
  (function
   | {
       failure_conditional = v_failure_conditional;
       failure_next_step = v_failure_next_step;
       failure_response = v_failure_response;
       success_conditional = v_success_conditional;
       success_next_step = v_success_next_step;
       success_response = v_success_response;
       timeout_conditional = v_timeout_conditional;
       timeout_next_step = v_timeout_next_step;
       timeout_response = v_timeout_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_timeout_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_response)
               v_timeout_response
           in
           let bnd = "timeout_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_timeout_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step)
               v_timeout_next_step
           in
           let bnd = "timeout_next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_timeout_conditional then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional)
               v_timeout_conditional
           in
           let bnd = "timeout_conditional", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_success_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_response)
               v_success_response
           in
           let bnd = "success_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_success_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_next_step)
               v_success_next_step
           in
           let bnd = "success_next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_success_conditional then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__success_conditional)
               v_success_conditional
           in
           let bnd = "success_conditional", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_failure_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_response)
               v_failure_response
           in
           let bnd = "failure_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_failure_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_next_step)
               v_failure_next_step
           in
           let bnd = "failure_next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_failure_conditional then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification__failure_conditional)
               v_failure_conditional
           in
           let bnd = "failure_conditional", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook__post_code_hook_specification ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__code_hook__post_code_hook_specification

[@@@deriving.end]

type initial_response_setting__code_hook = {
  active : bool prop;
  enable_code_hook_invocation : bool prop;
  invocation_label : string prop option; [@option]
  post_code_hook_specification :
    initial_response_setting__code_hook__post_code_hook_specification
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : initial_response_setting__code_hook) -> ()

let yojson_of_initial_response_setting__code_hook =
  (function
   | {
       active = v_active;
       enable_code_hook_invocation = v_enable_code_hook_invocation;
       invocation_label = v_invocation_label;
       post_code_hook_specification = v_post_code_hook_specification;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_post_code_hook_specification then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook__post_code_hook_specification)
               v_post_code_hook_specification
           in
           let bnd = "post_code_hook_specification", arg in
           bnd :: bnds
       in
       let bnds =
         match v_invocation_label with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "invocation_label", arg in
             bnd :: bnds
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_bool
             v_enable_code_hook_invocation
         in
         ("enable_code_hook_invocation", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__code_hook ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_initial_response_setting__code_hook

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__condition = {
  expression_string : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__condition) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__condition
    =
  (function
   | { expression_string = v_expression_string } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_string v_expression_string
         in
         ("expression_string", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__condition ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__condition

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__next_step__dialog_action) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__next_step__dialog_action

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__next_step__intent__slot__value

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    initial_response_setting__conditional__conditional_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__next_step__intent__slot) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__next_step__intent__slot

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    initial_response_setting__conditional__conditional_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__next_step__intent) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__next_step__intent

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    initial_response_setting__conditional__conditional_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    initial_response_setting__conditional__conditional_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__next_step) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__next_step

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response__message_group__message = {
  custom_payload :
    initial_response_setting__conditional__conditional_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__conditional__conditional_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__conditional__conditional_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response__message_group__message) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response__message_group__variation = {
  custom_payload :
    initial_response_setting__conditional__conditional_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__conditional__conditional_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response__message_group__variation) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response__message_group = {
  message :
    initial_response_setting__conditional__conditional_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    initial_response_setting__conditional__conditional_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response__message_group) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    initial_response_setting__conditional__conditional_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__conditional_branch__response) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch__response

[@@@deriving.end]

type initial_response_setting__conditional__conditional_branch = {
  name : string prop;
  condition :
    initial_response_setting__conditional__conditional_branch__condition
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step :
    initial_response_setting__conditional__conditional_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    initial_response_setting__conditional__conditional_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : initial_response_setting__conditional__conditional_branch) ->
  ()

let yojson_of_initial_response_setting__conditional__conditional_branch
    =
  (function
   | {
       name = v_name;
       condition = v_condition;
       next_step = v_next_step;
       response = v_response;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_condition then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch__condition)
               v_condition
           in
           let bnd = "condition", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__conditional_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__conditional_branch

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__next_step__dialog_action) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__next_step__dialog_action
    =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__next_step__dialog_action

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__next_step__intent__slot__value) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__next_step__intent__slot__value

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    initial_response_setting__conditional__default_branch__next_step__intent__slot__value
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__next_step__intent__slot) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__next_step__intent__slot
    =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__next_step__intent__slot

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__next_step__intent = {
  name : string prop option; [@option]
  slot :
    initial_response_setting__conditional__default_branch__next_step__intent__slot
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__next_step__intent) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__next_step__intent
    =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__next_step__intent

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    initial_response_setting__conditional__default_branch__next_step__dialog_action
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent :
    initial_response_setting__conditional__default_branch__next_step__intent
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__next_step) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__next_step
    =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__next_step

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response__message_group__message__custom_payload) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__custom_payload

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card__button

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response__message_group__message__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__plain_text_message

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response__message_group__message__ssml_message) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__ssml_message

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response__message_group__message = {
  custom_payload :
    initial_response_setting__conditional__default_branch__response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__conditional__default_branch__response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__conditional__default_branch__response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response__message_group__message) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response__message_group__variation__custom_payload) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__custom_payload

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card__button

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__plain_text_message

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response__message_group__variation__ssml_message) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__ssml_message

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response__message_group__variation = {
  custom_payload :
    initial_response_setting__conditional__default_branch__response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__conditional__default_branch__response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__conditional__default_branch__response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response__message_group__variation) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response__message_group = {
  message :
    initial_response_setting__conditional__default_branch__response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    initial_response_setting__conditional__default_branch__response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response__message_group) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response__message_group

[@@@deriving.end]

type initial_response_setting__conditional__default_branch__response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    initial_response_setting__conditional__default_branch__response__message_group
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__conditional__default_branch__response) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch__response
    =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch__response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch__response

[@@@deriving.end]

type initial_response_setting__conditional__default_branch = {
  next_step :
    initial_response_setting__conditional__default_branch__next_step
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  response :
    initial_response_setting__conditional__default_branch__response
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : initial_response_setting__conditional__default_branch) ->
  ()

let yojson_of_initial_response_setting__conditional__default_branch =
  (function
   | { next_step = v_next_step; response = v_response } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__response)
               v_response
           in
           let bnd = "response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional__default_branch ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__conditional__default_branch

[@@@deriving.end]

type initial_response_setting__conditional = {
  active : bool prop;
  conditional_branch :
    initial_response_setting__conditional__conditional_branch list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  default_branch :
    initial_response_setting__conditional__default_branch list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : initial_response_setting__conditional) -> ()

let yojson_of_initial_response_setting__conditional =
  (function
   | {
       active = v_active;
       conditional_branch = v_conditional_branch;
       default_branch = v_default_branch;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_default_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__default_branch)
               v_default_branch
           in
           let bnd = "default_branch", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional_branch then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional__conditional_branch)
               v_conditional_branch
           in
           let bnd = "conditional_branch", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_bool v_active in
         ("active", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__conditional ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_initial_response_setting__conditional

[@@@deriving.end]

type initial_response_setting__initial_response__message_group__message__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__initial_response__message_group__message__custom_payload) ->
  ()

let yojson_of_initial_response_setting__initial_response__message_group__message__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response__message_group__message__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__initial_response__message_group__message__custom_payload

[@@@deriving.end]

type initial_response_setting__initial_response__message_group__message__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__initial_response__message_group__message__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__initial_response__message_group__message__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response__message_group__message__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__initial_response__message_group__message__image_response_card__button

[@@@deriving.end]

type initial_response_setting__initial_response__message_group__message__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__initial_response__message_group__message__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__initial_response__message_group__message__image_response_card) ->
  ()

let yojson_of_initial_response_setting__initial_response__message_group__message__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response__message_group__message__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response__message_group__message__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__initial_response__message_group__message__image_response_card

[@@@deriving.end]

type initial_response_setting__initial_response__message_group__message__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__initial_response__message_group__message__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__initial_response__message_group__message__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response__message_group__message__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__initial_response__message_group__message__plain_text_message

[@@@deriving.end]

type initial_response_setting__initial_response__message_group__message__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__initial_response__message_group__message__ssml_message) ->
  ()

let yojson_of_initial_response_setting__initial_response__message_group__message__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response__message_group__message__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__initial_response__message_group__message__ssml_message

[@@@deriving.end]

type initial_response_setting__initial_response__message_group__message = {
  custom_payload :
    initial_response_setting__initial_response__message_group__message__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__initial_response__message_group__message__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__initial_response__message_group__message__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__initial_response__message_group__message__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__initial_response__message_group__message) ->
  ()

let yojson_of_initial_response_setting__initial_response__message_group__message
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response__message_group__message__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response__message_group__message__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response__message_group__message__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response__message_group__message__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response__message_group__message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__initial_response__message_group__message

[@@@deriving.end]

type initial_response_setting__initial_response__message_group__variation__custom_payload = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__initial_response__message_group__variation__custom_payload) ->
  ()

let yojson_of_initial_response_setting__initial_response__message_group__variation__custom_payload
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response__message_group__variation__custom_payload ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__initial_response__message_group__variation__custom_payload

[@@@deriving.end]

type initial_response_setting__initial_response__message_group__variation__image_response_card__button = {
  text : string prop;
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__initial_response__message_group__variation__image_response_card__button) ->
  ()

let yojson_of_initial_response_setting__initial_response__message_group__variation__image_response_card__button
    =
  (function
   | { text = v_text; value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_text in
         ("text", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response__message_group__variation__image_response_card__button ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__initial_response__message_group__variation__image_response_card__button

[@@@deriving.end]

type initial_response_setting__initial_response__message_group__variation__image_response_card = {
  image_url : string prop option; [@option]
  subtitle : string prop option; [@option]
  title : string prop;
  button :
    initial_response_setting__initial_response__message_group__variation__image_response_card__button
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__initial_response__message_group__variation__image_response_card) ->
  ()

let yojson_of_initial_response_setting__initial_response__message_group__variation__image_response_card
    =
  (function
   | {
       image_url = v_image_url;
       subtitle = v_subtitle;
       title = v_title;
       button = v_button;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_button then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response__message_group__variation__image_response_card__button)
               v_button
           in
           let bnd = "button", arg in
           bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_title in
         ("title", arg) :: bnds
       in
       let bnds =
         match v_subtitle with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "subtitle", arg in
             bnd :: bnds
       in
       let bnds =
         match v_image_url with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "image_url", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response__message_group__variation__image_response_card ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__initial_response__message_group__variation__image_response_card

[@@@deriving.end]

type initial_response_setting__initial_response__message_group__variation__plain_text_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__initial_response__message_group__variation__plain_text_message) ->
  ()

let yojson_of_initial_response_setting__initial_response__message_group__variation__plain_text_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response__message_group__variation__plain_text_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__initial_response__message_group__variation__plain_text_message

[@@@deriving.end]

type initial_response_setting__initial_response__message_group__variation__ssml_message = {
  value : string prop;
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__initial_response__message_group__variation__ssml_message) ->
  ()

let yojson_of_initial_response_setting__initial_response__message_group__variation__ssml_message
    =
  (function
   | { value = v_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_value in
         ("value", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response__message_group__variation__ssml_message ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__initial_response__message_group__variation__ssml_message

[@@@deriving.end]

type initial_response_setting__initial_response__message_group__variation = {
  custom_payload :
    initial_response_setting__initial_response__message_group__variation__custom_payload
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  image_response_card :
    initial_response_setting__initial_response__message_group__variation__image_response_card
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  plain_text_message :
    initial_response_setting__initial_response__message_group__variation__plain_text_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  ssml_message :
    initial_response_setting__initial_response__message_group__variation__ssml_message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ :
       initial_response_setting__initial_response__message_group__variation) ->
  ()

let yojson_of_initial_response_setting__initial_response__message_group__variation
    =
  (function
   | {
       custom_payload = v_custom_payload;
       image_response_card = v_image_response_card;
       plain_text_message = v_plain_text_message;
       ssml_message = v_ssml_message;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_ssml_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response__message_group__variation__ssml_message)
               v_ssml_message
           in
           let bnd = "ssml_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_plain_text_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response__message_group__variation__plain_text_message)
               v_plain_text_message
           in
           let bnd = "plain_text_message", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_image_response_card then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response__message_group__variation__image_response_card)
               v_image_response_card
           in
           let bnd = "image_response_card", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_custom_payload then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response__message_group__variation__custom_payload)
               v_custom_payload
           in
           let bnd = "custom_payload", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response__message_group__variation ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__initial_response__message_group__variation

[@@@deriving.end]

type initial_response_setting__initial_response__message_group = {
  message :
    initial_response_setting__initial_response__message_group__message
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  variation :
    initial_response_setting__initial_response__message_group__variation
    list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : initial_response_setting__initial_response__message_group) ->
  ()

let yojson_of_initial_response_setting__initial_response__message_group
    =
  (function
   | { message = v_message; variation = v_variation } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_variation then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response__message_group__variation)
               v_variation
           in
           let bnd = "variation", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_message then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response__message_group__message)
               v_message
           in
           let bnd = "message", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response__message_group ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__initial_response__message_group

[@@@deriving.end]

type initial_response_setting__initial_response = {
  allow_interrupt : bool prop option; [@option]
  message_group :
    initial_response_setting__initial_response__message_group list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : initial_response_setting__initial_response) -> ()

let yojson_of_initial_response_setting__initial_response =
  (function
   | {
       allow_interrupt = v_allow_interrupt;
       message_group = v_message_group;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_message_group then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response__message_group)
               v_message_group
           in
           let bnd = "message_group", arg in
           bnd :: bnds
       in
       let bnds =
         match v_allow_interrupt with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "allow_interrupt", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__initial_response ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_initial_response_setting__initial_response

[@@@deriving.end]

type initial_response_setting__next_step__dialog_action = {
  slot_to_elicit : string prop option; [@option]
  suppress_next_message : bool prop option; [@option]
  type_ : string prop; [@key "type"]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : initial_response_setting__next_step__dialog_action) -> ()

let yojson_of_initial_response_setting__next_step__dialog_action =
  (function
   | {
       slot_to_elicit = v_slot_to_elicit;
       suppress_next_message = v_suppress_next_message;
       type_ = v_type_;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_type_ in
         ("type", arg) :: bnds
       in
       let bnds =
         match v_suppress_next_message with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "suppress_next_message", arg in
             bnd :: bnds
       in
       let bnds =
         match v_slot_to_elicit with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "slot_to_elicit", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__next_step__dialog_action ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_initial_response_setting__next_step__dialog_action

[@@@deriving.end]

type initial_response_setting__next_step__intent__slot__value = {
  interpreted_value : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : initial_response_setting__next_step__intent__slot__value) ->
  ()

let yojson_of_initial_response_setting__next_step__intent__slot__value
    =
  (function
   | { interpreted_value = v_interpreted_value } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_interpreted_value with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "interpreted_value", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__next_step__intent__slot__value ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ =
  yojson_of_initial_response_setting__next_step__intent__slot__value

[@@@deriving.end]

type initial_response_setting__next_step__intent__slot = {
  map_block_key : string prop;
  shape : string prop option; [@option]
  value :
    initial_response_setting__next_step__intent__slot__value list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ =
 fun (_ : initial_response_setting__next_step__intent__slot) -> ()

let yojson_of_initial_response_setting__next_step__intent__slot =
  (function
   | {
       map_block_key = v_map_block_key;
       shape = v_shape;
       value = v_value;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_value then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__next_step__intent__slot__value)
               v_value
           in
           let bnd = "value", arg in
           bnd :: bnds
       in
       let bnds =
         match v_shape with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "shape", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_map_block_key in
         ("map_block_key", arg) :: bnds
       in
       `Assoc bnds
    : initial_response_setting__next_step__intent__slot ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_initial_response_setting__next_step__intent__slot

[@@@deriving.end]

type initial_response_setting__next_step__intent = {
  name : string prop option; [@option]
  slot : initial_response_setting__next_step__intent__slot list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : initial_response_setting__next_step__intent) -> ()

let yojson_of_initial_response_setting__next_step__intent =
  (function
   | { name = v_name; slot = v_slot } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_slot then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__next_step__intent__slot)
               v_slot
           in
           let bnd = "slot", arg in
           bnd :: bnds
       in
       let bnds =
         match v_name with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "name", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__next_step__intent ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_initial_response_setting__next_step__intent

[@@@deriving.end]

type initial_response_setting__next_step = {
  session_attributes : string prop Tf_core.assoc option; [@option]
  dialog_action :
    initial_response_setting__next_step__dialog_action list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  intent : initial_response_setting__next_step__intent list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : initial_response_setting__next_step) -> ()

let yojson_of_initial_response_setting__next_step =
  (function
   | {
       session_attributes = v_session_attributes;
       dialog_action = v_dialog_action;
       intent = v_intent;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_intent then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__next_step__intent)
               v_intent
           in
           let bnd = "intent", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_action then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__next_step__dialog_action)
               v_dialog_action
           in
           let bnd = "dialog_action", arg in
           bnd :: bnds
       in
       let bnds =
         match v_session_attributes with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg =
               Tf_core.yojson_of_assoc
                 (yojson_of_prop yojson_of_string)
                 v
             in
             let bnd = "session_attributes", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting__next_step ->
      Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_initial_response_setting__next_step

[@@@deriving.end]

type initial_response_setting = {
  code_hook : initial_response_setting__code_hook list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  conditional : initial_response_setting__conditional list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  initial_response : initial_response_setting__initial_response list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  next_step : initial_response_setting__next_step list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : initial_response_setting) -> ()

let yojson_of_initial_response_setting =
  (function
   | {
       code_hook = v_code_hook;
       conditional = v_conditional;
       initial_response = v_initial_response;
       next_step = v_next_step;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         if Stdlib.( = ) [] v_next_step then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__next_step)
               v_next_step
           in
           let bnd = "next_step", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_initial_response then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__initial_response)
               v_initial_response
           in
           let bnd = "initial_response", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_conditional then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__conditional)
               v_conditional
           in
           let bnd = "conditional", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_code_hook then bnds
         else
           let arg =
             (yojson_of_list
                yojson_of_initial_response_setting__code_hook)
               v_code_hook
           in
           let bnd = "code_hook", arg in
           bnd :: bnds
       in
       `Assoc bnds
    : initial_response_setting -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_initial_response_setting

[@@@deriving.end]

type input_context = { name : string prop }
[@@deriving_inline yojson_of]

let _ = fun (_ : input_context) -> ()

let yojson_of_input_context =
  (function
   | { name = v_name } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : input_context -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_input_context

[@@@deriving.end]

type kendra_configuration = {
  kendra_index : string prop;
  query_filter_string : string prop option; [@option]
  query_filter_string_enabled : bool prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : kendra_configuration) -> ()

let yojson_of_kendra_configuration =
  (function
   | {
       kendra_index = v_kendra_index;
       query_filter_string = v_query_filter_string;
       query_filter_string_enabled = v_query_filter_string_enabled;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_query_filter_string_enabled with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_bool v in
             let bnd = "query_filter_string_enabled", arg in
             bnd :: bnds
       in
       let bnds =
         match v_query_filter_string with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "query_filter_string", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_kendra_index in
         ("kendra_index", arg) :: bnds
       in
       `Assoc bnds
    : kendra_configuration -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_kendra_configuration

[@@@deriving.end]

type output_context = {
  name : string prop;
  time_to_live_in_seconds : float prop;
  turns_to_live : float prop;
}
[@@deriving_inline yojson_of]

let _ = fun (_ : output_context) -> ()

let yojson_of_output_context =
  (function
   | {
       name = v_name;
       time_to_live_in_seconds = v_time_to_live_in_seconds;
       turns_to_live = v_turns_to_live;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_float v_turns_to_live in
         ("turns_to_live", arg) :: bnds
       in
       let bnds =
         let arg =
           yojson_of_prop yojson_of_float v_time_to_live_in_seconds
         in
         ("time_to_live_in_seconds", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       `Assoc bnds
    : output_context -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_output_context

[@@@deriving.end]

type sample_utterance = { utterance : string prop }
[@@deriving_inline yojson_of]

let _ = fun (_ : sample_utterance) -> ()

let yojson_of_sample_utterance =
  (function
   | { utterance = v_utterance } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_utterance in
         ("utterance", arg) :: bnds
       in
       `Assoc bnds
    : sample_utterance -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_sample_utterance

[@@@deriving.end]

type slot_priority = { priority : float prop; slot_id : string prop }
[@@deriving_inline yojson_of]

let _ = fun (_ : slot_priority) -> ()

let yojson_of_slot_priority =
  (function
   | { priority = v_priority; slot_id = v_slot_id } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_slot_id in
         ("slot_id", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_float v_priority in
         ("priority", arg) :: bnds
       in
       `Assoc bnds
    : slot_priority -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_slot_priority

[@@@deriving.end]

type timeouts = {
  create : string prop option; [@option]
  delete : string prop option; [@option]
  update : string prop option; [@option]
}
[@@deriving_inline yojson_of]

let _ = fun (_ : timeouts) -> ()

let yojson_of_timeouts =
  (function
   | { create = v_create; delete = v_delete; update = v_update } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         match v_update with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "update", arg in
             bnd :: bnds
       in
       let bnds =
         match v_delete with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "delete", arg in
             bnd :: bnds
       in
       let bnds =
         match v_create with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "create", arg in
             bnd :: bnds
       in
       `Assoc bnds
    : timeouts -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_timeouts

[@@@deriving.end]

type aws_lexv2models_intent = {
  bot_id : string prop;
  bot_version : string prop;
  description : string prop option; [@option]
  locale_id : string prop;
  name : string prop;
  parent_intent_signature : string prop option; [@option]
  closing_setting : closing_setting list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  confirmation_setting : confirmation_setting list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  dialog_code_hook : dialog_code_hook list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  fulfillment_code_hook : fulfillment_code_hook list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  initial_response_setting : initial_response_setting list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  input_context : input_context list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  kendra_configuration : kendra_configuration list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  output_context : output_context list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  sample_utterance : sample_utterance list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  slot_priority : slot_priority list;
      [@default []] [@yojson_drop_default Stdlib.( = )]
  timeouts : timeouts option;
}
[@@deriving_inline yojson_of]

let _ = fun (_ : aws_lexv2models_intent) -> ()

let yojson_of_aws_lexv2models_intent =
  (function
   | {
       bot_id = v_bot_id;
       bot_version = v_bot_version;
       description = v_description;
       locale_id = v_locale_id;
       name = v_name;
       parent_intent_signature = v_parent_intent_signature;
       closing_setting = v_closing_setting;
       confirmation_setting = v_confirmation_setting;
       dialog_code_hook = v_dialog_code_hook;
       fulfillment_code_hook = v_fulfillment_code_hook;
       initial_response_setting = v_initial_response_setting;
       input_context = v_input_context;
       kendra_configuration = v_kendra_configuration;
       output_context = v_output_context;
       sample_utterance = v_sample_utterance;
       slot_priority = v_slot_priority;
       timeouts = v_timeouts;
     } ->
       let bnds : (string * Ppx_yojson_conv_lib.Yojson.Safe.t) list =
         []
       in
       let bnds =
         let arg = yojson_of_option yojson_of_timeouts v_timeouts in
         ("timeouts", arg) :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_slot_priority then bnds
         else
           let arg =
             (yojson_of_list yojson_of_slot_priority) v_slot_priority
           in
           let bnd = "slot_priority", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_sample_utterance then bnds
         else
           let arg =
             (yojson_of_list yojson_of_sample_utterance)
               v_sample_utterance
           in
           let bnd = "sample_utterance", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_output_context then bnds
         else
           let arg =
             (yojson_of_list yojson_of_output_context)
               v_output_context
           in
           let bnd = "output_context", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_kendra_configuration then bnds
         else
           let arg =
             (yojson_of_list yojson_of_kendra_configuration)
               v_kendra_configuration
           in
           let bnd = "kendra_configuration", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_input_context then bnds
         else
           let arg =
             (yojson_of_list yojson_of_input_context) v_input_context
           in
           let bnd = "input_context", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_initial_response_setting then bnds
         else
           let arg =
             (yojson_of_list yojson_of_initial_response_setting)
               v_initial_response_setting
           in
           let bnd = "initial_response_setting", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_fulfillment_code_hook then bnds
         else
           let arg =
             (yojson_of_list yojson_of_fulfillment_code_hook)
               v_fulfillment_code_hook
           in
           let bnd = "fulfillment_code_hook", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_dialog_code_hook then bnds
         else
           let arg =
             (yojson_of_list yojson_of_dialog_code_hook)
               v_dialog_code_hook
           in
           let bnd = "dialog_code_hook", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_confirmation_setting then bnds
         else
           let arg =
             (yojson_of_list yojson_of_confirmation_setting)
               v_confirmation_setting
           in
           let bnd = "confirmation_setting", arg in
           bnd :: bnds
       in
       let bnds =
         if Stdlib.( = ) [] v_closing_setting then bnds
         else
           let arg =
             (yojson_of_list yojson_of_closing_setting)
               v_closing_setting
           in
           let bnd = "closing_setting", arg in
           bnd :: bnds
       in
       let bnds =
         match v_parent_intent_signature with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "parent_intent_signature", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_name in
         ("name", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_locale_id in
         ("locale_id", arg) :: bnds
       in
       let bnds =
         match v_description with
         | Ppx_yojson_conv_lib.Option.None -> bnds
         | Ppx_yojson_conv_lib.Option.Some v ->
             let arg = yojson_of_prop yojson_of_string v in
             let bnd = "description", arg in
             bnd :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_bot_version in
         ("bot_version", arg) :: bnds
       in
       let bnds =
         let arg = yojson_of_prop yojson_of_string v_bot_id in
         ("bot_id", arg) :: bnds
       in
       `Assoc bnds
    : aws_lexv2models_intent -> Ppx_yojson_conv_lib.Yojson.Safe.t)

let _ = yojson_of_aws_lexv2models_intent

[@@@deriving.end]

let closing_setting__closing_response__message_group__message__custom_payload
    ~value () :
    closing_setting__closing_response__message_group__message__custom_payload
    =
  { value }

let closing_setting__closing_response__message_group__message__image_response_card__button
    ~text ~value () :
    closing_setting__closing_response__message_group__message__image_response_card__button
    =
  { text; value }

let closing_setting__closing_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    closing_setting__closing_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let closing_setting__closing_response__message_group__message__plain_text_message
    ~value () :
    closing_setting__closing_response__message_group__message__plain_text_message
    =
  { value }

let closing_setting__closing_response__message_group__message__ssml_message
    ~value () :
    closing_setting__closing_response__message_group__message__ssml_message
    =
  { value }

let closing_setting__closing_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    closing_setting__closing_response__message_group__message =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let closing_setting__closing_response__message_group__variation__custom_payload
    ~value () :
    closing_setting__closing_response__message_group__variation__custom_payload
    =
  { value }

let closing_setting__closing_response__message_group__variation__image_response_card__button
    ~text ~value () :
    closing_setting__closing_response__message_group__variation__image_response_card__button
    =
  { text; value }

let closing_setting__closing_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    closing_setting__closing_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let closing_setting__closing_response__message_group__variation__plain_text_message
    ~value () :
    closing_setting__closing_response__message_group__variation__plain_text_message
    =
  { value }

let closing_setting__closing_response__message_group__variation__ssml_message
    ~value () :
    closing_setting__closing_response__message_group__variation__ssml_message
    =
  { value }

let closing_setting__closing_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    closing_setting__closing_response__message_group__variation =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let closing_setting__closing_response__message_group ?(message = [])
    ?(variation = []) () :
    closing_setting__closing_response__message_group =
  { message; variation }

let closing_setting__closing_response ?allow_interrupt
    ?(message_group = []) () : closing_setting__closing_response =
  { allow_interrupt; message_group }

let closing_setting__conditional__conditional_branch__condition
    ~expression_string () :
    closing_setting__conditional__conditional_branch__condition =
  { expression_string }

let closing_setting__conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    closing_setting__conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let closing_setting__conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    closing_setting__conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let closing_setting__conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    closing_setting__conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let closing_setting__conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    closing_setting__conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let closing_setting__conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    closing_setting__conditional__conditional_branch__next_step =
  { session_attributes; dialog_action; intent }

let closing_setting__conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    closing_setting__conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    closing_setting__conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let closing_setting__conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    closing_setting__conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let closing_setting__conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    closing_setting__conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let closing_setting__conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    closing_setting__conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let closing_setting__conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    closing_setting__conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    closing_setting__conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let closing_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    closing_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let closing_setting__conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    closing_setting__conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let closing_setting__conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    closing_setting__conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let closing_setting__conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    closing_setting__conditional__conditional_branch__response__message_group
    =
  { message; variation }

let closing_setting__conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    closing_setting__conditional__conditional_branch__response =
  { allow_interrupt; message_group }

let closing_setting__conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    closing_setting__conditional__conditional_branch =
  { name; condition; next_step; response }

let closing_setting__conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    closing_setting__conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let closing_setting__conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    closing_setting__conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let closing_setting__conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    closing_setting__conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let closing_setting__conditional__default_branch__next_step__intent
    ?name ~slot () :
    closing_setting__conditional__default_branch__next_step__intent =
  { name; slot }

let closing_setting__conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    closing_setting__conditional__default_branch__next_step =
  { session_attributes; dialog_action; intent }

let closing_setting__conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    closing_setting__conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let closing_setting__conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    closing_setting__conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let closing_setting__conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    closing_setting__conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let closing_setting__conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    closing_setting__conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let closing_setting__conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    closing_setting__conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let closing_setting__conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    closing_setting__conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let closing_setting__conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    closing_setting__conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let closing_setting__conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    closing_setting__conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let closing_setting__conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    closing_setting__conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let closing_setting__conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    closing_setting__conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let closing_setting__conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    closing_setting__conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let closing_setting__conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    closing_setting__conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let closing_setting__conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    closing_setting__conditional__default_branch__response__message_group
    =
  { message; variation }

let closing_setting__conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    closing_setting__conditional__default_branch__response =
  { allow_interrupt; message_group }

let closing_setting__conditional__default_branch ?(next_step = [])
    ?(response = []) () :
    closing_setting__conditional__default_branch =
  { next_step; response }

let closing_setting__conditional ?(conditional_branch = [])
    ?(default_branch = []) ~active () : closing_setting__conditional
    =
  { active; conditional_branch; default_branch }

let closing_setting__next_step__dialog_action ?slot_to_elicit
    ?suppress_next_message ~type_ () :
    closing_setting__next_step__dialog_action =
  { slot_to_elicit; suppress_next_message; type_ }

let closing_setting__next_step__intent__slot__value
    ?interpreted_value () :
    closing_setting__next_step__intent__slot__value =
  { interpreted_value }

let closing_setting__next_step__intent__slot ?shape ?(value = [])
    ~map_block_key () : closing_setting__next_step__intent__slot =
  { map_block_key; shape; value }

let closing_setting__next_step__intent ?name ~slot () :
    closing_setting__next_step__intent =
  { name; slot }

let closing_setting__next_step ?session_attributes
    ?(dialog_action = []) ?(intent = []) () :
    closing_setting__next_step =
  { session_attributes; dialog_action; intent }

let closing_setting ?active ?(closing_response = [])
    ?(conditional = []) ?(next_step = []) () : closing_setting =
  { active; closing_response; conditional; next_step }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition
    ~expression_string () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition
    =
  { expression_string }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group
    =
  { message; variation }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response
    =
  { allow_interrupt; message_group }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch
    =
  { name; condition; next_step; response }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent
    ?name ~slot () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent
    =
  { name; slot }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group
    =
  { message; variation }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response
    =
  { allow_interrupt; message_group }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch
    ?(next_step = []) ?(response = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch
    =
  { next_step; response }

let confirmation_setting__code_hook__post_code_hook_specification__failure_conditional
    ?(conditional_branch = []) ?(default_branch = []) ~active () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_conditional
    =
  { active; conditional_branch; default_branch }

let confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent
    ?name ~slot () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_next_step__intent
    =
  { name; slot }

let confirmation_setting__code_hook__post_code_hook_specification__failure_next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response__message_group
    =
  { message; variation }

let confirmation_setting__code_hook__post_code_hook_specification__failure_response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__failure_response
    =
  { allow_interrupt; message_group }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition
    ~expression_string () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition
    =
  { expression_string }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group
    =
  { message; variation }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response
    =
  { allow_interrupt; message_group }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch
    =
  { name; condition; next_step; response }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent
    ?name ~slot () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent
    =
  { name; slot }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group
    =
  { message; variation }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response
    =
  { allow_interrupt; message_group }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch
    ?(next_step = []) ?(response = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional__default_branch
    =
  { next_step; response }

let confirmation_setting__code_hook__post_code_hook_specification__success_conditional
    ?(conditional_branch = []) ?(default_branch = []) ~active () :
    confirmation_setting__code_hook__post_code_hook_specification__success_conditional
    =
  { active; conditional_branch; default_branch }

let confirmation_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent
    ?name ~slot () :
    confirmation_setting__code_hook__post_code_hook_specification__success_next_step__intent
    =
  { name; slot }

let confirmation_setting__code_hook__post_code_hook_specification__success_next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response__message_group
    =
  { message; variation }

let confirmation_setting__code_hook__post_code_hook_specification__success_response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__success_response
    =
  { allow_interrupt; message_group }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition
    ~expression_string () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition
    =
  { expression_string }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group
    =
  { message; variation }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response
    =
  { allow_interrupt; message_group }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch
    =
  { name; condition; next_step; response }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent
    ?name ~slot () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent
    =
  { name; slot }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group
    =
  { message; variation }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response
    =
  { allow_interrupt; message_group }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch
    ?(next_step = []) ?(response = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch
    =
  { next_step; response }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional
    ?(conditional_branch = []) ?(default_branch = []) ~active () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_conditional
    =
  { active; conditional_branch; default_branch }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent
    ?name ~slot () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step__intent
    =
  { name; slot }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response__message_group
    =
  { message; variation }

let confirmation_setting__code_hook__post_code_hook_specification__timeout_response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__code_hook__post_code_hook_specification__timeout_response
    =
  { allow_interrupt; message_group }

let confirmation_setting__code_hook__post_code_hook_specification
    ?(failure_conditional = []) ?(failure_next_step = [])
    ?(failure_response = []) ?(success_conditional = [])
    ?(success_next_step = []) ?(success_response = [])
    ?(timeout_conditional = []) ?(timeout_next_step = [])
    ?(timeout_response = []) () :
    confirmation_setting__code_hook__post_code_hook_specification =
  {
    failure_conditional;
    failure_next_step;
    failure_response;
    success_conditional;
    success_next_step;
    success_response;
    timeout_conditional;
    timeout_next_step;
    timeout_response;
  }

let confirmation_setting__code_hook ?invocation_label
    ?(post_code_hook_specification = []) ~active
    ~enable_code_hook_invocation () : confirmation_setting__code_hook
    =
  {
    active;
    enable_code_hook_invocation;
    invocation_label;
    post_code_hook_specification;
  }

let confirmation_setting__confirmation_conditional__conditional_branch__condition
    ~expression_string () :
    confirmation_setting__confirmation_conditional__conditional_branch__condition
    =
  { expression_string }

let confirmation_setting__confirmation_conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__confirmation_conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    confirmation_setting__confirmation_conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let confirmation_setting__confirmation_conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__confirmation_conditional__conditional_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__confirmation_conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__confirmation_conditional__conditional_branch__response__message_group
    =
  { message; variation }

let confirmation_setting__confirmation_conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__confirmation_conditional__conditional_branch__response
    =
  { allow_interrupt; message_group }

let confirmation_setting__confirmation_conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    confirmation_setting__confirmation_conditional__conditional_branch
    =
  { name; condition; next_step; response }

let confirmation_setting__confirmation_conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__confirmation_conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__confirmation_conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__confirmation_conditional__default_branch__next_step__intent
    ?name ~slot () :
    confirmation_setting__confirmation_conditional__default_branch__next_step__intent
    =
  { name; slot }

let confirmation_setting__confirmation_conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__confirmation_conditional__default_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__confirmation_conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__confirmation_conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__confirmation_conditional__default_branch__response__message_group
    =
  { message; variation }

let confirmation_setting__confirmation_conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__confirmation_conditional__default_branch__response
    =
  { allow_interrupt; message_group }

let confirmation_setting__confirmation_conditional__default_branch
    ?(next_step = []) ?(response = []) () :
    confirmation_setting__confirmation_conditional__default_branch =
  { next_step; response }

let confirmation_setting__confirmation_conditional
    ?(conditional_branch = []) ?(default_branch = []) ~active () :
    confirmation_setting__confirmation_conditional =
  { active; conditional_branch; default_branch }

let confirmation_setting__confirmation_next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__confirmation_next_step__dialog_action =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__confirmation_next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__confirmation_next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__confirmation_next_step__intent__slot ?shape
    ?(value = []) ~map_block_key () :
    confirmation_setting__confirmation_next_step__intent__slot =
  { map_block_key; shape; value }

let confirmation_setting__confirmation_next_step__intent ?name ~slot
    () : confirmation_setting__confirmation_next_step__intent =
  { name; slot }

let confirmation_setting__confirmation_next_step ?session_attributes
    ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__confirmation_next_step =
  { session_attributes; dialog_action; intent }

let confirmation_setting__confirmation_response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__confirmation_response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__confirmation_response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__confirmation_response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__confirmation_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__confirmation_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__confirmation_response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__confirmation_response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__confirmation_response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__confirmation_response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__confirmation_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__confirmation_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__confirmation_response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__confirmation_response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__confirmation_response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__confirmation_response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__confirmation_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__confirmation_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__confirmation_response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__confirmation_response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__confirmation_response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__confirmation_response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__confirmation_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__confirmation_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__confirmation_response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__confirmation_response__message_group =
  { message; variation }

let confirmation_setting__confirmation_response ?allow_interrupt
    ?(message_group = []) () :
    confirmation_setting__confirmation_response =
  { allow_interrupt; message_group }

let confirmation_setting__declination_conditional__conditional_branch__condition
    ~expression_string () :
    confirmation_setting__declination_conditional__conditional_branch__condition
    =
  { expression_string }

let confirmation_setting__declination_conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__declination_conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__declination_conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__declination_conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    confirmation_setting__declination_conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let confirmation_setting__declination_conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__declination_conditional__conditional_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__declination_conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__declination_conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__declination_conditional__conditional_branch__response__message_group
    =
  { message; variation }

let confirmation_setting__declination_conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__declination_conditional__conditional_branch__response
    =
  { allow_interrupt; message_group }

let confirmation_setting__declination_conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    confirmation_setting__declination_conditional__conditional_branch
    =
  { name; condition; next_step; response }

let confirmation_setting__declination_conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__declination_conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__declination_conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__declination_conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__declination_conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__declination_conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__declination_conditional__default_branch__next_step__intent
    ?name ~slot () :
    confirmation_setting__declination_conditional__default_branch__next_step__intent
    =
  { name; slot }

let confirmation_setting__declination_conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__declination_conditional__default_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__declination_conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__declination_conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__declination_conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__declination_conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__declination_conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__declination_conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__declination_conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__declination_conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__declination_conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__declination_conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__declination_conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__declination_conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__declination_conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__declination_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__declination_conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__declination_conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__declination_conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__declination_conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__declination_conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__declination_conditional__default_branch__response__message_group
    =
  { message; variation }

let confirmation_setting__declination_conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__declination_conditional__default_branch__response
    =
  { allow_interrupt; message_group }

let confirmation_setting__declination_conditional__default_branch
    ?(next_step = []) ?(response = []) () :
    confirmation_setting__declination_conditional__default_branch =
  { next_step; response }

let confirmation_setting__declination_conditional
    ?(conditional_branch = []) ?(default_branch = []) ~active () :
    confirmation_setting__declination_conditional =
  { active; conditional_branch; default_branch }

let confirmation_setting__declination_next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__declination_next_step__dialog_action =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__declination_next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__declination_next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__declination_next_step__intent__slot ?shape
    ?(value = []) ~map_block_key () :
    confirmation_setting__declination_next_step__intent__slot =
  { map_block_key; shape; value }

let confirmation_setting__declination_next_step__intent ?name ~slot
    () : confirmation_setting__declination_next_step__intent =
  { name; slot }

let confirmation_setting__declination_next_step ?session_attributes
    ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__declination_next_step =
  { session_attributes; dialog_action; intent }

let confirmation_setting__declination_response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__declination_response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__declination_response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__declination_response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__declination_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__declination_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__declination_response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__declination_response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__declination_response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__declination_response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__declination_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__declination_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__declination_response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__declination_response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__declination_response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__declination_response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__declination_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__declination_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__declination_response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__declination_response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__declination_response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__declination_response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__declination_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__declination_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__declination_response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__declination_response__message_group =
  { message; variation }

let confirmation_setting__declination_response ?allow_interrupt
    ?(message_group = []) () :
    confirmation_setting__declination_response =
  { allow_interrupt; message_group }

let confirmation_setting__elicitation_code_hook
    ?enable_code_hook_invocation ?invocation_label () :
    confirmation_setting__elicitation_code_hook =
  { enable_code_hook_invocation; invocation_label }

let confirmation_setting__failure_conditional__conditional_branch__condition
    ~expression_string () :
    confirmation_setting__failure_conditional__conditional_branch__condition
    =
  { expression_string }

let confirmation_setting__failure_conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__failure_conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__failure_conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__failure_conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    confirmation_setting__failure_conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let confirmation_setting__failure_conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__failure_conditional__conditional_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__failure_conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__failure_conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__failure_conditional__conditional_branch__response__message_group
    =
  { message; variation }

let confirmation_setting__failure_conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__failure_conditional__conditional_branch__response
    =
  { allow_interrupt; message_group }

let confirmation_setting__failure_conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    confirmation_setting__failure_conditional__conditional_branch =
  { name; condition; next_step; response }

let confirmation_setting__failure_conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__failure_conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__failure_conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__failure_conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let confirmation_setting__failure_conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    confirmation_setting__failure_conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let confirmation_setting__failure_conditional__default_branch__next_step__intent
    ?name ~slot () :
    confirmation_setting__failure_conditional__default_branch__next_step__intent
    =
  { name; slot }

let confirmation_setting__failure_conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__failure_conditional__default_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let confirmation_setting__failure_conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__failure_conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__failure_conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__failure_conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__failure_conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__failure_conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__failure_conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__failure_conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__failure_conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__failure_conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__failure_conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__failure_conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__failure_conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__failure_conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__failure_conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__failure_conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__failure_conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__failure_conditional__default_branch__response__message_group
    =
  { message; variation }

let confirmation_setting__failure_conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    confirmation_setting__failure_conditional__default_branch__response
    =
  { allow_interrupt; message_group }

let confirmation_setting__failure_conditional__default_branch
    ?(next_step = []) ?(response = []) () :
    confirmation_setting__failure_conditional__default_branch =
  { next_step; response }

let confirmation_setting__failure_conditional
    ?(conditional_branch = []) ?(default_branch = []) ~active () :
    confirmation_setting__failure_conditional =
  { active; conditional_branch; default_branch }

let confirmation_setting__failure_next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    confirmation_setting__failure_next_step__dialog_action =
  { slot_to_elicit; suppress_next_message; type_ }

let confirmation_setting__failure_next_step__intent__slot__value
    ?interpreted_value () :
    confirmation_setting__failure_next_step__intent__slot__value =
  { interpreted_value }

let confirmation_setting__failure_next_step__intent__slot ?shape
    ?(value = []) ~map_block_key () :
    confirmation_setting__failure_next_step__intent__slot =
  { map_block_key; shape; value }

let confirmation_setting__failure_next_step__intent ?name ~slot () :
    confirmation_setting__failure_next_step__intent =
  { name; slot }

let confirmation_setting__failure_next_step ?session_attributes
    ?(dialog_action = []) ?(intent = []) () :
    confirmation_setting__failure_next_step =
  { session_attributes; dialog_action; intent }

let confirmation_setting__failure_response__message_group__message__custom_payload
    ~value () :
    confirmation_setting__failure_response__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__failure_response__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__failure_response__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__failure_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__failure_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__failure_response__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__failure_response__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__failure_response__message_group__message__ssml_message
    ~value () :
    confirmation_setting__failure_response__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__failure_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__failure_response__message_group__message =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__failure_response__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__failure_response__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__failure_response__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__failure_response__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__failure_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__failure_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__failure_response__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__failure_response__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__failure_response__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__failure_response__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__failure_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__failure_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__failure_response__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__failure_response__message_group =
  { message; variation }

let confirmation_setting__failure_response ?allow_interrupt
    ?(message_group = []) () : confirmation_setting__failure_response
    =
  { allow_interrupt; message_group }

let confirmation_setting__prompt_specification__message_group__message__custom_payload
    ~value () :
    confirmation_setting__prompt_specification__message_group__message__custom_payload
    =
  { value }

let confirmation_setting__prompt_specification__message_group__message__image_response_card__button
    ~text ~value () :
    confirmation_setting__prompt_specification__message_group__message__image_response_card__button
    =
  { text; value }

let confirmation_setting__prompt_specification__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__prompt_specification__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__prompt_specification__message_group__message__plain_text_message
    ~value () :
    confirmation_setting__prompt_specification__message_group__message__plain_text_message
    =
  { value }

let confirmation_setting__prompt_specification__message_group__message__ssml_message
    ~value () :
    confirmation_setting__prompt_specification__message_group__message__ssml_message
    =
  { value }

let confirmation_setting__prompt_specification__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__prompt_specification__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__prompt_specification__message_group__variation__custom_payload
    ~value () :
    confirmation_setting__prompt_specification__message_group__variation__custom_payload
    =
  { value }

let confirmation_setting__prompt_specification__message_group__variation__image_response_card__button
    ~text ~value () :
    confirmation_setting__prompt_specification__message_group__variation__image_response_card__button
    =
  { text; value }

let confirmation_setting__prompt_specification__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    confirmation_setting__prompt_specification__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let confirmation_setting__prompt_specification__message_group__variation__plain_text_message
    ~value () :
    confirmation_setting__prompt_specification__message_group__variation__plain_text_message
    =
  { value }

let confirmation_setting__prompt_specification__message_group__variation__ssml_message
    ~value () :
    confirmation_setting__prompt_specification__message_group__variation__ssml_message
    =
  { value }

let confirmation_setting__prompt_specification__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    confirmation_setting__prompt_specification__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let confirmation_setting__prompt_specification__message_group
    ?(message = []) ?(variation = []) () :
    confirmation_setting__prompt_specification__message_group =
  { message; variation }

let confirmation_setting__prompt_specification__prompt_attempts_specification__allowed_input_types
    ~allow_audio_input ~allow_dtmf_input () :
    confirmation_setting__prompt_specification__prompt_attempts_specification__allowed_input_types
    =
  { allow_audio_input; allow_dtmf_input }

let confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__audio_specification
    ~end_timeout_ms ~max_length_ms () :
    confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__audio_specification
    =
  { end_timeout_ms; max_length_ms }

let confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__dtmf_specification
    ~deletion_character ~end_character ~end_timeout_ms ~max_length ()
    :
    confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification__dtmf_specification
    =
  { deletion_character; end_character; end_timeout_ms; max_length }

let confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification
    ?(audio_specification = []) ?(dtmf_specification = [])
    ~start_timeout_ms () :
    confirmation_setting__prompt_specification__prompt_attempts_specification__audio_and_dtmf_input_specification
    =
  { start_timeout_ms; audio_specification; dtmf_specification }

let confirmation_setting__prompt_specification__prompt_attempts_specification__text_input_specification
    ~start_timeout_ms () :
    confirmation_setting__prompt_specification__prompt_attempts_specification__text_input_specification
    =
  { start_timeout_ms }

let confirmation_setting__prompt_specification__prompt_attempts_specification
    ?allow_interrupt ?(allowed_input_types = [])
    ?(audio_and_dtmf_input_specification = [])
    ?(text_input_specification = []) ~map_block_key () :
    confirmation_setting__prompt_specification__prompt_attempts_specification
    =
  {
    allow_interrupt;
    map_block_key;
    allowed_input_types;
    audio_and_dtmf_input_specification;
    text_input_specification;
  }

let confirmation_setting__prompt_specification ?allow_interrupt
    ?message_selection_strategy ?(message_group = []) ~max_retries
    ~prompt_attempts_specification () :
    confirmation_setting__prompt_specification =
  {
    allow_interrupt;
    max_retries;
    message_selection_strategy;
    message_group;
    prompt_attempts_specification;
  }

let confirmation_setting ?active ?(code_hook = [])
    ?(confirmation_conditional = []) ?(confirmation_next_step = [])
    ?(confirmation_response = []) ?(declination_conditional = [])
    ?(declination_next_step = []) ?(declination_response = [])
    ?(elicitation_code_hook = []) ?(failure_conditional = [])
    ?(failure_next_step = []) ?(failure_response = [])
    ?(prompt_specification = []) () : confirmation_setting =
  {
    active;
    code_hook;
    confirmation_conditional;
    confirmation_next_step;
    confirmation_response;
    declination_conditional;
    declination_next_step;
    declination_response;
    elicitation_code_hook;
    failure_conditional;
    failure_next_step;
    failure_response;
    prompt_specification;
  }

let dialog_code_hook ~enabled () : dialog_code_hook = { enabled }

let fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__custom_payload
    ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__custom_payload
    =
  { value }

let fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__plain_text_message
    ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__plain_text_message
    =
  { value }

let fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__ssml_message
    ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message__ssml_message
    =
  { value }

let fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__custom_payload
    ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__custom_payload
    =
  { value }

let fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__plain_text_message
    ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__plain_text_message
    =
  { value }

let fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__ssml_message
    ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation__ssml_message
    =
  { value }

let fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group
    ?(message = []) ?(variation = []) () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response__message_group
    =
  { message; variation }

let fulfillment_code_hook__fulfillment_updates_specification__start_response
    ?allow_interrupt ?delay_in_seconds ?(message_group = []) () :
    fulfillment_code_hook__fulfillment_updates_specification__start_response
    =
  { allow_interrupt; delay_in_seconds; message_group }

let fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__custom_payload
    ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__custom_payload
    =
  { value }

let fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__plain_text_message
    ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__plain_text_message
    =
  { value }

let fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__ssml_message
    ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message__ssml_message
    =
  { value }

let fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__custom_payload
    ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__custom_payload
    =
  { value }

let fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__plain_text_message
    ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__plain_text_message
    =
  { value }

let fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__ssml_message
    ~value () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation__ssml_message
    =
  { value }

let fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group
    ?(message = []) ?(variation = []) () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response__message_group
    =
  { message; variation }

let fulfillment_code_hook__fulfillment_updates_specification__update_response
    ?allow_interrupt ?(message_group = []) ~frequency_in_seconds () :
    fulfillment_code_hook__fulfillment_updates_specification__update_response
    =
  { allow_interrupt; frequency_in_seconds; message_group }

let fulfillment_code_hook__fulfillment_updates_specification
    ?timeout_in_seconds ?(start_response = [])
    ?(update_response = []) ~active () :
    fulfillment_code_hook__fulfillment_updates_specification =
  { active; timeout_in_seconds; start_response; update_response }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__condition
    ~expression_string () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__condition
    =
  { expression_string }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response__message_group
    =
  { message; variation }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch__response
    =
  { allow_interrupt; message_group }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__conditional_branch
    =
  { name; condition; next_step; response }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent
    ?name ~slot () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step__intent
    =
  { name; slot }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response__message_group
    =
  { message; variation }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch__response
    =
  { allow_interrupt; message_group }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch
    ?(next_step = []) ?(response = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional__default_branch
    =
  { next_step; response }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional
    ?(conditional_branch = []) ?(default_branch = []) ~active () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_conditional
    =
  { active; conditional_branch; default_branch }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot__value
    ?interpreted_value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot__value
    =
  { interpreted_value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent__slot
    =
  { map_block_key; shape; value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent
    ?name ~slot () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step__intent
    =
  { name; slot }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_next_step
    =
  { session_attributes; dialog_action; intent }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group
    ?(message = []) ?(variation = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response__message_group
    =
  { message; variation }

let fulfillment_code_hook__post_fulfillment_status_specification__failure_response
    ?allow_interrupt ?(message_group = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__failure_response
    =
  { allow_interrupt; message_group }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__condition
    ~expression_string () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__condition
    =
  { expression_string }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response__message_group
    =
  { message; variation }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch__response
    =
  { allow_interrupt; message_group }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__conditional_branch
    =
  { name; condition; next_step; response }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent
    ?name ~slot () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step__intent
    =
  { name; slot }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response__message_group
    =
  { message; variation }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch__response
    =
  { allow_interrupt; message_group }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch
    ?(next_step = []) ?(response = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional__default_branch
    =
  { next_step; response }

let fulfillment_code_hook__post_fulfillment_status_specification__success_conditional
    ?(conditional_branch = []) ?(default_branch = []) ~active () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_conditional
    =
  { active; conditional_branch; default_branch }

let fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot__value
    ?interpreted_value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot__value
    =
  { interpreted_value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent__slot
    =
  { map_block_key; shape; value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent
    ?name ~slot () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_next_step__intent
    =
  { name; slot }

let fulfillment_code_hook__post_fulfillment_status_specification__success_next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_next_step
    =
  { session_attributes; dialog_action; intent }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group
    ?(message = []) ?(variation = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response__message_group
    =
  { message; variation }

let fulfillment_code_hook__post_fulfillment_status_specification__success_response
    ?allow_interrupt ?(message_group = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__success_response
    =
  { allow_interrupt; message_group }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__condition
    ~expression_string () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__condition
    =
  { expression_string }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response__message_group
    =
  { message; variation }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch__response
    =
  { allow_interrupt; message_group }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__conditional_branch
    =
  { name; condition; next_step; response }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent
    ?name ~slot () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step__intent
    =
  { name; slot }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response__message_group
    =
  { message; variation }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch__response
    =
  { allow_interrupt; message_group }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch
    ?(next_step = []) ?(response = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional__default_branch
    =
  { next_step; response }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional
    ?(conditional_branch = []) ?(default_branch = []) ~active () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_conditional
    =
  { active; conditional_branch; default_branch }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot__value
    ?interpreted_value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot__value
    =
  { interpreted_value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent__slot
    =
  { map_block_key; shape; value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent
    ?name ~slot () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step__intent
    =
  { name; slot }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_next_step
    =
  { session_attributes; dialog_action; intent }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__custom_payload
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__custom_payload
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card__button
    ~text ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card__button
    =
  { text; value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__plain_text_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__plain_text_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__ssml_message
    ~value () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation__ssml_message
    =
  { value }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group
    ?(message = []) ?(variation = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response__message_group
    =
  { message; variation }

let fulfillment_code_hook__post_fulfillment_status_specification__timeout_response
    ?allow_interrupt ?(message_group = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification__timeout_response
    =
  { allow_interrupt; message_group }

let fulfillment_code_hook__post_fulfillment_status_specification
    ?(failure_conditional = []) ?(failure_next_step = [])
    ?(failure_response = []) ?(success_conditional = [])
    ?(success_next_step = []) ?(success_response = [])
    ?(timeout_conditional = []) ?(timeout_next_step = [])
    ?(timeout_response = []) () :
    fulfillment_code_hook__post_fulfillment_status_specification =
  {
    failure_conditional;
    failure_next_step;
    failure_response;
    success_conditional;
    success_next_step;
    success_response;
    timeout_conditional;
    timeout_next_step;
    timeout_response;
  }

let fulfillment_code_hook ?active
    ?(fulfillment_updates_specification = [])
    ?(post_fulfillment_status_specification = []) ~enabled () :
    fulfillment_code_hook =
  {
    active;
    enabled;
    fulfillment_updates_specification;
    post_fulfillment_status_specification;
  }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition
    ~expression_string () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__condition
    =
  { expression_string }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response__message_group
    =
  { message; variation }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch__response
    =
  { allow_interrupt; message_group }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__conditional_branch
    =
  { name; condition; next_step; response }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent
    ?name ~slot () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step__intent
    =
  { name; slot }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response__message_group
    =
  { message; variation }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch__response
    =
  { allow_interrupt; message_group }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch
    ?(next_step = []) ?(response = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional__default_branch
    =
  { next_step; response }

let initial_response_setting__code_hook__post_code_hook_specification__failure_conditional
    ?(conditional_branch = []) ?(default_branch = []) ~active () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_conditional
    =
  { active; conditional_branch; default_branch }

let initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value
    ?interpreted_value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot__value
    =
  { interpreted_value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent__slot
    =
  { map_block_key; shape; value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent
    ?name ~slot () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_next_step__intent
    =
  { name; slot }

let initial_response_setting__code_hook__post_code_hook_specification__failure_next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_next_step
    =
  { session_attributes; dialog_action; intent }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group
    ?(message = []) ?(variation = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response__message_group
    =
  { message; variation }

let initial_response_setting__code_hook__post_code_hook_specification__failure_response
    ?allow_interrupt ?(message_group = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__failure_response
    =
  { allow_interrupt; message_group }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition
    ~expression_string () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__condition
    =
  { expression_string }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response__message_group
    =
  { message; variation }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch__response
    =
  { allow_interrupt; message_group }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__conditional_branch
    =
  { name; condition; next_step; response }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent
    ?name ~slot () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step__intent
    =
  { name; slot }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response__message_group
    =
  { message; variation }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch__response
    =
  { allow_interrupt; message_group }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch
    ?(next_step = []) ?(response = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional__default_branch
    =
  { next_step; response }

let initial_response_setting__code_hook__post_code_hook_specification__success_conditional
    ?(conditional_branch = []) ?(default_branch = []) ~active () :
    initial_response_setting__code_hook__post_code_hook_specification__success_conditional
    =
  { active; conditional_branch; default_branch }

let initial_response_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    initial_response_setting__code_hook__post_code_hook_specification__success_next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value
    ?interpreted_value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot__value
    =
  { interpreted_value }

let initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent__slot
    =
  { map_block_key; shape; value }

let initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent
    ?name ~slot () :
    initial_response_setting__code_hook__post_code_hook_specification__success_next_step__intent
    =
  { name; slot }

let initial_response_setting__code_hook__post_code_hook_specification__success_next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_next_step
    =
  { session_attributes; dialog_action; intent }

let initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group
    ?(message = []) ?(variation = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response__message_group
    =
  { message; variation }

let initial_response_setting__code_hook__post_code_hook_specification__success_response
    ?allow_interrupt ?(message_group = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__success_response
    =
  { allow_interrupt; message_group }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition
    ~expression_string () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__condition
    =
  { expression_string }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response__message_group
    =
  { message; variation }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch__response
    =
  { allow_interrupt; message_group }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__conditional_branch
    =
  { name; condition; next_step; response }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent
    ?name ~slot () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step__intent
    =
  { name; slot }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response__message_group
    =
  { message; variation }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch__response
    =
  { allow_interrupt; message_group }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch
    ?(next_step = []) ?(response = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional__default_branch
    =
  { next_step; response }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional
    ?(conditional_branch = []) ?(default_branch = []) ~active () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_conditional
    =
  { active; conditional_branch; default_branch }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value
    ?interpreted_value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot__value
    =
  { interpreted_value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent__slot
    =
  { map_block_key; shape; value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent
    ?name ~slot () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step__intent
    =
  { name; slot }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_next_step
    =
  { session_attributes; dialog_action; intent }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__custom_payload
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button
    ~text ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card__button
    =
  { text; value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__plain_text_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message
    ~value () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation__ssml_message
    =
  { value }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group
    ?(message = []) ?(variation = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response__message_group
    =
  { message; variation }

let initial_response_setting__code_hook__post_code_hook_specification__timeout_response
    ?allow_interrupt ?(message_group = []) () :
    initial_response_setting__code_hook__post_code_hook_specification__timeout_response
    =
  { allow_interrupt; message_group }

let initial_response_setting__code_hook__post_code_hook_specification
    ?(failure_conditional = []) ?(failure_next_step = [])
    ?(failure_response = []) ?(success_conditional = [])
    ?(success_next_step = []) ?(success_response = [])
    ?(timeout_conditional = []) ?(timeout_next_step = [])
    ?(timeout_response = []) () :
    initial_response_setting__code_hook__post_code_hook_specification
    =
  {
    failure_conditional;
    failure_next_step;
    failure_response;
    success_conditional;
    success_next_step;
    success_response;
    timeout_conditional;
    timeout_next_step;
    timeout_response;
  }

let initial_response_setting__code_hook ?invocation_label
    ?(post_code_hook_specification = []) ~active
    ~enable_code_hook_invocation () :
    initial_response_setting__code_hook =
  {
    active;
    enable_code_hook_invocation;
    invocation_label;
    post_code_hook_specification;
  }

let initial_response_setting__conditional__conditional_branch__condition
    ~expression_string () :
    initial_response_setting__conditional__conditional_branch__condition
    =
  { expression_string }

let initial_response_setting__conditional__conditional_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    initial_response_setting__conditional__conditional_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let initial_response_setting__conditional__conditional_branch__next_step__intent__slot__value
    ?interpreted_value () :
    initial_response_setting__conditional__conditional_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let initial_response_setting__conditional__conditional_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    initial_response_setting__conditional__conditional_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let initial_response_setting__conditional__conditional_branch__next_step__intent
    ?name ~slot () :
    initial_response_setting__conditional__conditional_branch__next_step__intent
    =
  { name; slot }

let initial_response_setting__conditional__conditional_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    initial_response_setting__conditional__conditional_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let initial_response_setting__conditional__conditional_branch__response__message_group__message__custom_payload
    ~value () :
    initial_response_setting__conditional__conditional_branch__response__message_group__message__custom_payload
    =
  { value }

let initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__conditional__conditional_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__conditional__conditional_branch__response__message_group__message__plain_text_message
    ~value () :
    initial_response_setting__conditional__conditional_branch__response__message_group__message__plain_text_message
    =
  { value }

let initial_response_setting__conditional__conditional_branch__response__message_group__message__ssml_message
    ~value () :
    initial_response_setting__conditional__conditional_branch__response__message_group__message__ssml_message
    =
  { value }

let initial_response_setting__conditional__conditional_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__conditional__conditional_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__conditional__conditional_branch__response__message_group__variation__custom_payload
    ~value () :
    initial_response_setting__conditional__conditional_branch__response__message_group__variation__custom_payload
    =
  { value }

let initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__conditional__conditional_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message
    ~value () :
    initial_response_setting__conditional__conditional_branch__response__message_group__variation__plain_text_message
    =
  { value }

let initial_response_setting__conditional__conditional_branch__response__message_group__variation__ssml_message
    ~value () :
    initial_response_setting__conditional__conditional_branch__response__message_group__variation__ssml_message
    =
  { value }

let initial_response_setting__conditional__conditional_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__conditional__conditional_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__conditional__conditional_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    initial_response_setting__conditional__conditional_branch__response__message_group
    =
  { message; variation }

let initial_response_setting__conditional__conditional_branch__response
    ?allow_interrupt ?(message_group = []) () :
    initial_response_setting__conditional__conditional_branch__response
    =
  { allow_interrupt; message_group }

let initial_response_setting__conditional__conditional_branch
    ?(condition = []) ?(next_step = []) ?(response = []) ~name () :
    initial_response_setting__conditional__conditional_branch =
  { name; condition; next_step; response }

let initial_response_setting__conditional__default_branch__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    initial_response_setting__conditional__default_branch__next_step__dialog_action
    =
  { slot_to_elicit; suppress_next_message; type_ }

let initial_response_setting__conditional__default_branch__next_step__intent__slot__value
    ?interpreted_value () :
    initial_response_setting__conditional__default_branch__next_step__intent__slot__value
    =
  { interpreted_value }

let initial_response_setting__conditional__default_branch__next_step__intent__slot
    ?shape ?(value = []) ~map_block_key () :
    initial_response_setting__conditional__default_branch__next_step__intent__slot
    =
  { map_block_key; shape; value }

let initial_response_setting__conditional__default_branch__next_step__intent
    ?name ~slot () :
    initial_response_setting__conditional__default_branch__next_step__intent
    =
  { name; slot }

let initial_response_setting__conditional__default_branch__next_step
    ?session_attributes ?(dialog_action = []) ?(intent = []) () :
    initial_response_setting__conditional__default_branch__next_step
    =
  { session_attributes; dialog_action; intent }

let initial_response_setting__conditional__default_branch__response__message_group__message__custom_payload
    ~value () :
    initial_response_setting__conditional__default_branch__response__message_group__message__custom_payload
    =
  { value }

let initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card__button
    ~text ~value () :
    initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card__button
    =
  { text; value }

let initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__conditional__default_branch__response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__conditional__default_branch__response__message_group__message__plain_text_message
    ~value () :
    initial_response_setting__conditional__default_branch__response__message_group__message__plain_text_message
    =
  { value }

let initial_response_setting__conditional__default_branch__response__message_group__message__ssml_message
    ~value () :
    initial_response_setting__conditional__default_branch__response__message_group__message__ssml_message
    =
  { value }

let initial_response_setting__conditional__default_branch__response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__conditional__default_branch__response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__conditional__default_branch__response__message_group__variation__custom_payload
    ~value () :
    initial_response_setting__conditional__default_branch__response__message_group__variation__custom_payload
    =
  { value }

let initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card__button
    ~text ~value () :
    initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card__button
    =
  { text; value }

let initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__conditional__default_branch__response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__conditional__default_branch__response__message_group__variation__plain_text_message
    ~value () :
    initial_response_setting__conditional__default_branch__response__message_group__variation__plain_text_message
    =
  { value }

let initial_response_setting__conditional__default_branch__response__message_group__variation__ssml_message
    ~value () :
    initial_response_setting__conditional__default_branch__response__message_group__variation__ssml_message
    =
  { value }

let initial_response_setting__conditional__default_branch__response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__conditional__default_branch__response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__conditional__default_branch__response__message_group
    ?(message = []) ?(variation = []) () :
    initial_response_setting__conditional__default_branch__response__message_group
    =
  { message; variation }

let initial_response_setting__conditional__default_branch__response
    ?allow_interrupt ?(message_group = []) () :
    initial_response_setting__conditional__default_branch__response =
  { allow_interrupt; message_group }

let initial_response_setting__conditional__default_branch
    ?(next_step = []) ?(response = []) () :
    initial_response_setting__conditional__default_branch =
  { next_step; response }

let initial_response_setting__conditional ?(conditional_branch = [])
    ?(default_branch = []) ~active () :
    initial_response_setting__conditional =
  { active; conditional_branch; default_branch }

let initial_response_setting__initial_response__message_group__message__custom_payload
    ~value () :
    initial_response_setting__initial_response__message_group__message__custom_payload
    =
  { value }

let initial_response_setting__initial_response__message_group__message__image_response_card__button
    ~text ~value () :
    initial_response_setting__initial_response__message_group__message__image_response_card__button
    =
  { text; value }

let initial_response_setting__initial_response__message_group__message__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__initial_response__message_group__message__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__initial_response__message_group__message__plain_text_message
    ~value () :
    initial_response_setting__initial_response__message_group__message__plain_text_message
    =
  { value }

let initial_response_setting__initial_response__message_group__message__ssml_message
    ~value () :
    initial_response_setting__initial_response__message_group__message__ssml_message
    =
  { value }

let initial_response_setting__initial_response__message_group__message
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__initial_response__message_group__message
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__initial_response__message_group__variation__custom_payload
    ~value () :
    initial_response_setting__initial_response__message_group__variation__custom_payload
    =
  { value }

let initial_response_setting__initial_response__message_group__variation__image_response_card__button
    ~text ~value () :
    initial_response_setting__initial_response__message_group__variation__image_response_card__button
    =
  { text; value }

let initial_response_setting__initial_response__message_group__variation__image_response_card
    ?image_url ?subtitle ?(button = []) ~title () :
    initial_response_setting__initial_response__message_group__variation__image_response_card
    =
  { image_url; subtitle; title; button }

let initial_response_setting__initial_response__message_group__variation__plain_text_message
    ~value () :
    initial_response_setting__initial_response__message_group__variation__plain_text_message
    =
  { value }

let initial_response_setting__initial_response__message_group__variation__ssml_message
    ~value () :
    initial_response_setting__initial_response__message_group__variation__ssml_message
    =
  { value }

let initial_response_setting__initial_response__message_group__variation
    ?(custom_payload = []) ?(image_response_card = [])
    ?(plain_text_message = []) ?(ssml_message = []) () :
    initial_response_setting__initial_response__message_group__variation
    =
  {
    custom_payload;
    image_response_card;
    plain_text_message;
    ssml_message;
  }

let initial_response_setting__initial_response__message_group
    ?(message = []) ?(variation = []) () :
    initial_response_setting__initial_response__message_group =
  { message; variation }

let initial_response_setting__initial_response ?allow_interrupt
    ?(message_group = []) () :
    initial_response_setting__initial_response =
  { allow_interrupt; message_group }

let initial_response_setting__next_step__dialog_action
    ?slot_to_elicit ?suppress_next_message ~type_ () :
    initial_response_setting__next_step__dialog_action =
  { slot_to_elicit; suppress_next_message; type_ }

let initial_response_setting__next_step__intent__slot__value
    ?interpreted_value () :
    initial_response_setting__next_step__intent__slot__value =
  { interpreted_value }

let initial_response_setting__next_step__intent__slot ?shape
    ?(value = []) ~map_block_key () :
    initial_response_setting__next_step__intent__slot =
  { map_block_key; shape; value }

let initial_response_setting__next_step__intent ?name ~slot () :
    initial_response_setting__next_step__intent =
  { name; slot }

let initial_response_setting__next_step ?session_attributes
    ?(dialog_action = []) ?(intent = []) () :
    initial_response_setting__next_step =
  { session_attributes; dialog_action; intent }

let initial_response_setting ?(code_hook = []) ?(conditional = [])
    ?(initial_response = []) ?(next_step = []) () :
    initial_response_setting =
  { code_hook; conditional; initial_response; next_step }

let input_context ~name () : input_context = { name }

let kendra_configuration ?query_filter_string
    ?query_filter_string_enabled ~kendra_index () :
    kendra_configuration =
  { kendra_index; query_filter_string; query_filter_string_enabled }

let output_context ~name ~time_to_live_in_seconds ~turns_to_live () :
    output_context =
  { name; time_to_live_in_seconds; turns_to_live }

let sample_utterance ~utterance () : sample_utterance = { utterance }

let slot_priority ~priority ~slot_id () : slot_priority =
  { priority; slot_id }

let timeouts ?create ?delete ?update () : timeouts =
  { create; delete; update }

let aws_lexv2models_intent ?description ?parent_intent_signature
    ?(closing_setting = []) ?(confirmation_setting = [])
    ?(dialog_code_hook = []) ?(fulfillment_code_hook = [])
    ?(initial_response_setting = []) ?(input_context = [])
    ?(kendra_configuration = []) ?(output_context = [])
    ?(sample_utterance = []) ?(slot_priority = []) ?timeouts ~bot_id
    ~bot_version ~locale_id ~name () : aws_lexv2models_intent =
  {
    bot_id;
    bot_version;
    description;
    locale_id;
    name;
    parent_intent_signature;
    closing_setting;
    confirmation_setting;
    dialog_code_hook;
    fulfillment_code_hook;
    initial_response_setting;
    input_context;
    kendra_configuration;
    output_context;
    sample_utterance;
    slot_priority;
    timeouts;
  }

type t = {
  tf_name : string;
  bot_id : string prop;
  bot_version : string prop;
  creation_date_time : string prop;
  description : string prop;
  id : string prop;
  intent_id : string prop;
  last_updated_date_time : string prop;
  locale_id : string prop;
  name : string prop;
  parent_intent_signature : string prop;
}

let make ?description ?parent_intent_signature
    ?(closing_setting = []) ?(confirmation_setting = [])
    ?(dialog_code_hook = []) ?(fulfillment_code_hook = [])
    ?(initial_response_setting = []) ?(input_context = [])
    ?(kendra_configuration = []) ?(output_context = [])
    ?(sample_utterance = []) ?(slot_priority = []) ?timeouts ~bot_id
    ~bot_version ~locale_id ~name __id =
  let __type = "aws_lexv2models_intent" in
  let __attrs =
    ({
       tf_name = __id;
       bot_id = Prop.computed __type __id "bot_id";
       bot_version = Prop.computed __type __id "bot_version";
       creation_date_time =
         Prop.computed __type __id "creation_date_time";
       description = Prop.computed __type __id "description";
       id = Prop.computed __type __id "id";
       intent_id = Prop.computed __type __id "intent_id";
       last_updated_date_time =
         Prop.computed __type __id "last_updated_date_time";
       locale_id = Prop.computed __type __id "locale_id";
       name = Prop.computed __type __id "name";
       parent_intent_signature =
         Prop.computed __type __id "parent_intent_signature";
     }
      : t)
  in
  {
    Tf_core.id = __id;
    type_ = __type;
    json =
      yojson_of_aws_lexv2models_intent
        (aws_lexv2models_intent ?description ?parent_intent_signature
           ~closing_setting ~confirmation_setting ~dialog_code_hook
           ~fulfillment_code_hook ~initial_response_setting
           ~input_context ~kendra_configuration ~output_context
           ~sample_utterance ~slot_priority ?timeouts ~bot_id
           ~bot_version ~locale_id ~name ());
    attrs = __attrs;
  }

let register ?tf_module ?description ?parent_intent_signature
    ?(closing_setting = []) ?(confirmation_setting = [])
    ?(dialog_code_hook = []) ?(fulfillment_code_hook = [])
    ?(initial_response_setting = []) ?(input_context = [])
    ?(kendra_configuration = []) ?(output_context = [])
    ?(sample_utterance = []) ?(slot_priority = []) ?timeouts ~bot_id
    ~bot_version ~locale_id ~name __id =
  let (r : _ Tf_core.resource) =
    make ?description ?parent_intent_signature ~closing_setting
      ~confirmation_setting ~dialog_code_hook ~fulfillment_code_hook
      ~initial_response_setting ~input_context ~kendra_configuration
      ~output_context ~sample_utterance ~slot_priority ?timeouts
      ~bot_id ~bot_version ~locale_id ~name __id
  in
  Resource.add ?tf_module ~type_:r.type_ ~id:r.id r.json;
  r.attrs
